
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Artista
 * 
 */
export type Artista = $Result.DefaultSelection<Prisma.$ArtistaPayload>
/**
 * Model Album
 * 
 */
export type Album = $Result.DefaultSelection<Prisma.$AlbumPayload>
/**
 * Model Cancion
 * 
 */
export type Cancion = $Result.DefaultSelection<Prisma.$CancionPayload>
/**
 * Model Genero
 * 
 */
export type Genero = $Result.DefaultSelection<Prisma.$GeneroPayload>
/**
 * Model AlbumesEnGeneros
 * 
 */
export type AlbumesEnGeneros = $Result.DefaultSelection<Prisma.$AlbumesEnGenerosPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Artistas
 * const artistas = await prisma.artista.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Artistas
   * const artistas = await prisma.artista.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.artista`: Exposes CRUD operations for the **Artista** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Artistas
    * const artistas = await prisma.artista.findMany()
    * ```
    */
  get artista(): Prisma.ArtistaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.album`: Exposes CRUD operations for the **Album** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Albums
    * const albums = await prisma.album.findMany()
    * ```
    */
  get album(): Prisma.AlbumDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cancion`: Exposes CRUD operations for the **Cancion** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cancions
    * const cancions = await prisma.cancion.findMany()
    * ```
    */
  get cancion(): Prisma.CancionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.genero`: Exposes CRUD operations for the **Genero** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Generos
    * const generos = await prisma.genero.findMany()
    * ```
    */
  get genero(): Prisma.GeneroDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.albumesEnGeneros`: Exposes CRUD operations for the **AlbumesEnGeneros** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AlbumesEnGeneros
    * const albumesEnGeneros = await prisma.albumesEnGeneros.findMany()
    * ```
    */
  get albumesEnGeneros(): Prisma.AlbumesEnGenerosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Artista: 'Artista',
    Album: 'Album',
    Cancion: 'Cancion',
    Genero: 'Genero',
    AlbumesEnGeneros: 'AlbumesEnGeneros'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "artista" | "album" | "cancion" | "genero" | "albumesEnGeneros"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Artista: {
        payload: Prisma.$ArtistaPayload<ExtArgs>
        fields: Prisma.ArtistaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArtistaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArtistaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          findFirst: {
            args: Prisma.ArtistaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArtistaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          findMany: {
            args: Prisma.ArtistaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>[]
          }
          create: {
            args: Prisma.ArtistaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          createMany: {
            args: Prisma.ArtistaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArtistaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>[]
          }
          delete: {
            args: Prisma.ArtistaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          update: {
            args: Prisma.ArtistaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          deleteMany: {
            args: Prisma.ArtistaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArtistaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ArtistaUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>[]
          }
          upsert: {
            args: Prisma.ArtistaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArtistaPayload>
          }
          aggregate: {
            args: Prisma.ArtistaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArtista>
          }
          groupBy: {
            args: Prisma.ArtistaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArtistaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArtistaCountArgs<ExtArgs>
            result: $Utils.Optional<ArtistaCountAggregateOutputType> | number
          }
        }
      }
      Album: {
        payload: Prisma.$AlbumPayload<ExtArgs>
        fields: Prisma.AlbumFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findFirst: {
            args: Prisma.AlbumFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          findMany: {
            args: Prisma.AlbumFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          create: {
            args: Prisma.AlbumCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          createMany: {
            args: Prisma.AlbumCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          delete: {
            args: Prisma.AlbumDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          update: {
            args: Prisma.AlbumUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          deleteMany: {
            args: Prisma.AlbumDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlbumUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>[]
          }
          upsert: {
            args: Prisma.AlbumUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumPayload>
          }
          aggregate: {
            args: Prisma.AlbumAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbum>
          }
          groupBy: {
            args: Prisma.AlbumGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumCountAggregateOutputType> | number
          }
        }
      }
      Cancion: {
        payload: Prisma.$CancionPayload<ExtArgs>
        fields: Prisma.CancionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CancionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CancionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          findFirst: {
            args: Prisma.CancionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CancionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          findMany: {
            args: Prisma.CancionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>[]
          }
          create: {
            args: Prisma.CancionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          createMany: {
            args: Prisma.CancionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CancionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>[]
          }
          delete: {
            args: Prisma.CancionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          update: {
            args: Prisma.CancionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          deleteMany: {
            args: Prisma.CancionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CancionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CancionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>[]
          }
          upsert: {
            args: Prisma.CancionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CancionPayload>
          }
          aggregate: {
            args: Prisma.CancionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCancion>
          }
          groupBy: {
            args: Prisma.CancionGroupByArgs<ExtArgs>
            result: $Utils.Optional<CancionGroupByOutputType>[]
          }
          count: {
            args: Prisma.CancionCountArgs<ExtArgs>
            result: $Utils.Optional<CancionCountAggregateOutputType> | number
          }
        }
      }
      Genero: {
        payload: Prisma.$GeneroPayload<ExtArgs>
        fields: Prisma.GeneroFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GeneroFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GeneroFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          findFirst: {
            args: Prisma.GeneroFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GeneroFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          findMany: {
            args: Prisma.GeneroFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>[]
          }
          create: {
            args: Prisma.GeneroCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          createMany: {
            args: Prisma.GeneroCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GeneroCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>[]
          }
          delete: {
            args: Prisma.GeneroDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          update: {
            args: Prisma.GeneroUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          deleteMany: {
            args: Prisma.GeneroDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GeneroUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.GeneroUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>[]
          }
          upsert: {
            args: Prisma.GeneroUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GeneroPayload>
          }
          aggregate: {
            args: Prisma.GeneroAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGenero>
          }
          groupBy: {
            args: Prisma.GeneroGroupByArgs<ExtArgs>
            result: $Utils.Optional<GeneroGroupByOutputType>[]
          }
          count: {
            args: Prisma.GeneroCountArgs<ExtArgs>
            result: $Utils.Optional<GeneroCountAggregateOutputType> | number
          }
        }
      }
      AlbumesEnGeneros: {
        payload: Prisma.$AlbumesEnGenerosPayload<ExtArgs>
        fields: Prisma.AlbumesEnGenerosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AlbumesEnGenerosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AlbumesEnGenerosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          findFirst: {
            args: Prisma.AlbumesEnGenerosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AlbumesEnGenerosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          findMany: {
            args: Prisma.AlbumesEnGenerosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>[]
          }
          create: {
            args: Prisma.AlbumesEnGenerosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          createMany: {
            args: Prisma.AlbumesEnGenerosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AlbumesEnGenerosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>[]
          }
          delete: {
            args: Prisma.AlbumesEnGenerosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          update: {
            args: Prisma.AlbumesEnGenerosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          deleteMany: {
            args: Prisma.AlbumesEnGenerosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AlbumesEnGenerosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AlbumesEnGenerosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>[]
          }
          upsert: {
            args: Prisma.AlbumesEnGenerosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AlbumesEnGenerosPayload>
          }
          aggregate: {
            args: Prisma.AlbumesEnGenerosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAlbumesEnGeneros>
          }
          groupBy: {
            args: Prisma.AlbumesEnGenerosGroupByArgs<ExtArgs>
            result: $Utils.Optional<AlbumesEnGenerosGroupByOutputType>[]
          }
          count: {
            args: Prisma.AlbumesEnGenerosCountArgs<ExtArgs>
            result: $Utils.Optional<AlbumesEnGenerosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    artista?: ArtistaOmit
    album?: AlbumOmit
    cancion?: CancionOmit
    genero?: GeneroOmit
    albumesEnGeneros?: AlbumesEnGenerosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ArtistaCountOutputType
   */

  export type ArtistaCountOutputType = {
    albumes: number
  }

  export type ArtistaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    albumes?: boolean | ArtistaCountOutputTypeCountAlbumesArgs
  }

  // Custom InputTypes
  /**
   * ArtistaCountOutputType without action
   */
  export type ArtistaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ArtistaCountOutputType
     */
    select?: ArtistaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ArtistaCountOutputType without action
   */
  export type ArtistaCountOutputTypeCountAlbumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
  }


  /**
   * Count Type AlbumCountOutputType
   */

  export type AlbumCountOutputType = {
    canciones: number
    generos: number
  }

  export type AlbumCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    canciones?: boolean | AlbumCountOutputTypeCountCancionesArgs
    generos?: boolean | AlbumCountOutputTypeCountGenerosArgs
  }

  // Custom InputTypes
  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumCountOutputType
     */
    select?: AlbumCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountCancionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CancionWhereInput
  }

  /**
   * AlbumCountOutputType without action
   */
  export type AlbumCountOutputTypeCountGenerosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumesEnGenerosWhereInput
  }


  /**
   * Count Type GeneroCountOutputType
   */

  export type GeneroCountOutputType = {
    albumes: number
  }

  export type GeneroCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    albumes?: boolean | GeneroCountOutputTypeCountAlbumesArgs
  }

  // Custom InputTypes
  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GeneroCountOutputType
     */
    select?: GeneroCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GeneroCountOutputType without action
   */
  export type GeneroCountOutputTypeCountAlbumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumesEnGenerosWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Artista
   */

  export type AggregateArtista = {
    _count: ArtistaCountAggregateOutputType | null
    _min: ArtistaMinAggregateOutputType | null
    _max: ArtistaMaxAggregateOutputType | null
  }

  export type ArtistaMinAggregateOutputType = {
    id: string | null
    nombre: string | null
    portada: string | null
  }

  export type ArtistaMaxAggregateOutputType = {
    id: string | null
    nombre: string | null
    portada: string | null
  }

  export type ArtistaCountAggregateOutputType = {
    id: number
    nombre: number
    portada: number
    _all: number
  }


  export type ArtistaMinAggregateInputType = {
    id?: true
    nombre?: true
    portada?: true
  }

  export type ArtistaMaxAggregateInputType = {
    id?: true
    nombre?: true
    portada?: true
  }

  export type ArtistaCountAggregateInputType = {
    id?: true
    nombre?: true
    portada?: true
    _all?: true
  }

  export type ArtistaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artista to aggregate.
     */
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     */
    orderBy?: ArtistaOrderByWithRelationInput | ArtistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Artistas
    **/
    _count?: true | ArtistaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArtistaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArtistaMaxAggregateInputType
  }

  export type GetArtistaAggregateType<T extends ArtistaAggregateArgs> = {
        [P in keyof T & keyof AggregateArtista]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArtista[P]>
      : GetScalarType<T[P], AggregateArtista[P]>
  }




  export type ArtistaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArtistaWhereInput
    orderBy?: ArtistaOrderByWithAggregationInput | ArtistaOrderByWithAggregationInput[]
    by: ArtistaScalarFieldEnum[] | ArtistaScalarFieldEnum
    having?: ArtistaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArtistaCountAggregateInputType | true
    _min?: ArtistaMinAggregateInputType
    _max?: ArtistaMaxAggregateInputType
  }

  export type ArtistaGroupByOutputType = {
    id: string
    nombre: string
    portada: string | null
    _count: ArtistaCountAggregateOutputType | null
    _min: ArtistaMinAggregateOutputType | null
    _max: ArtistaMaxAggregateOutputType | null
  }

  type GetArtistaGroupByPayload<T extends ArtistaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArtistaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArtistaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArtistaGroupByOutputType[P]>
            : GetScalarType<T[P], ArtistaGroupByOutputType[P]>
        }
      >
    >


  export type ArtistaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    portada?: boolean
    albumes?: boolean | Artista$albumesArgs<ExtArgs>
    _count?: boolean | ArtistaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["artista"]>

  export type ArtistaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    portada?: boolean
  }, ExtArgs["result"]["artista"]>

  export type ArtistaSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    portada?: boolean
  }, ExtArgs["result"]["artista"]>

  export type ArtistaSelectScalar = {
    id?: boolean
    nombre?: boolean
    portada?: boolean
  }

  export type ArtistaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "portada", ExtArgs["result"]["artista"]>
  export type ArtistaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    albumes?: boolean | Artista$albumesArgs<ExtArgs>
    _count?: boolean | ArtistaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ArtistaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ArtistaIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ArtistaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Artista"
    objects: {
      albumes: Prisma.$AlbumPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nombre: string
      portada: string | null
    }, ExtArgs["result"]["artista"]>
    composites: {}
  }

  type ArtistaGetPayload<S extends boolean | null | undefined | ArtistaDefaultArgs> = $Result.GetResult<Prisma.$ArtistaPayload, S>

  type ArtistaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArtistaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArtistaCountAggregateInputType | true
    }

  export interface ArtistaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Artista'], meta: { name: 'Artista' } }
    /**
     * Find zero or one Artista that matches the filter.
     * @param {ArtistaFindUniqueArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArtistaFindUniqueArgs>(args: SelectSubset<T, ArtistaFindUniqueArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Artista that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArtistaFindUniqueOrThrowArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArtistaFindUniqueOrThrowArgs>(args: SelectSubset<T, ArtistaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artista that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindFirstArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArtistaFindFirstArgs>(args?: SelectSubset<T, ArtistaFindFirstArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Artista that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindFirstOrThrowArgs} args - Arguments to find a Artista
     * @example
     * // Get one Artista
     * const artista = await prisma.artista.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArtistaFindFirstOrThrowArgs>(args?: SelectSubset<T, ArtistaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Artistas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Artistas
     * const artistas = await prisma.artista.findMany()
     * 
     * // Get first 10 Artistas
     * const artistas = await prisma.artista.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const artistaWithIdOnly = await prisma.artista.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArtistaFindManyArgs>(args?: SelectSubset<T, ArtistaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Artista.
     * @param {ArtistaCreateArgs} args - Arguments to create a Artista.
     * @example
     * // Create one Artista
     * const Artista = await prisma.artista.create({
     *   data: {
     *     // ... data to create a Artista
     *   }
     * })
     * 
     */
    create<T extends ArtistaCreateArgs>(args: SelectSubset<T, ArtistaCreateArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Artistas.
     * @param {ArtistaCreateManyArgs} args - Arguments to create many Artistas.
     * @example
     * // Create many Artistas
     * const artista = await prisma.artista.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArtistaCreateManyArgs>(args?: SelectSubset<T, ArtistaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Artistas and returns the data saved in the database.
     * @param {ArtistaCreateManyAndReturnArgs} args - Arguments to create many Artistas.
     * @example
     * // Create many Artistas
     * const artista = await prisma.artista.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Artistas and only return the `id`
     * const artistaWithIdOnly = await prisma.artista.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArtistaCreateManyAndReturnArgs>(args?: SelectSubset<T, ArtistaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Artista.
     * @param {ArtistaDeleteArgs} args - Arguments to delete one Artista.
     * @example
     * // Delete one Artista
     * const Artista = await prisma.artista.delete({
     *   where: {
     *     // ... filter to delete one Artista
     *   }
     * })
     * 
     */
    delete<T extends ArtistaDeleteArgs>(args: SelectSubset<T, ArtistaDeleteArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Artista.
     * @param {ArtistaUpdateArgs} args - Arguments to update one Artista.
     * @example
     * // Update one Artista
     * const artista = await prisma.artista.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArtistaUpdateArgs>(args: SelectSubset<T, ArtistaUpdateArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Artistas.
     * @param {ArtistaDeleteManyArgs} args - Arguments to filter Artistas to delete.
     * @example
     * // Delete a few Artistas
     * const { count } = await prisma.artista.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArtistaDeleteManyArgs>(args?: SelectSubset<T, ArtistaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Artistas
     * const artista = await prisma.artista.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArtistaUpdateManyArgs>(args: SelectSubset<T, ArtistaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Artistas and returns the data updated in the database.
     * @param {ArtistaUpdateManyAndReturnArgs} args - Arguments to update many Artistas.
     * @example
     * // Update many Artistas
     * const artista = await prisma.artista.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Artistas and only return the `id`
     * const artistaWithIdOnly = await prisma.artista.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ArtistaUpdateManyAndReturnArgs>(args: SelectSubset<T, ArtistaUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Artista.
     * @param {ArtistaUpsertArgs} args - Arguments to update or create a Artista.
     * @example
     * // Update or create a Artista
     * const artista = await prisma.artista.upsert({
     *   create: {
     *     // ... data to create a Artista
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Artista we want to update
     *   }
     * })
     */
    upsert<T extends ArtistaUpsertArgs>(args: SelectSubset<T, ArtistaUpsertArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Artistas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaCountArgs} args - Arguments to filter Artistas to count.
     * @example
     * // Count the number of Artistas
     * const count = await prisma.artista.count({
     *   where: {
     *     // ... the filter for the Artistas we want to count
     *   }
     * })
    **/
    count<T extends ArtistaCountArgs>(
      args?: Subset<T, ArtistaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArtistaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Artista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArtistaAggregateArgs>(args: Subset<T, ArtistaAggregateArgs>): Prisma.PrismaPromise<GetArtistaAggregateType<T>>

    /**
     * Group by Artista.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArtistaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArtistaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArtistaGroupByArgs['orderBy'] }
        : { orderBy?: ArtistaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArtistaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArtistaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Artista model
   */
  readonly fields: ArtistaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Artista.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArtistaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    albumes<T extends Artista$albumesArgs<ExtArgs> = {}>(args?: Subset<T, Artista$albumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Artista model
   */
  interface ArtistaFieldRefs {
    readonly id: FieldRef<"Artista", 'String'>
    readonly nombre: FieldRef<"Artista", 'String'>
    readonly portada: FieldRef<"Artista", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Artista findUnique
   */
  export type ArtistaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter, which Artista to fetch.
     */
    where: ArtistaWhereUniqueInput
  }

  /**
   * Artista findUniqueOrThrow
   */
  export type ArtistaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter, which Artista to fetch.
     */
    where: ArtistaWhereUniqueInput
  }

  /**
   * Artista findFirst
   */
  export type ArtistaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter, which Artista to fetch.
     */
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     */
    orderBy?: ArtistaOrderByWithRelationInput | ArtistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artistas.
     */
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artistas.
     */
    distinct?: ArtistaScalarFieldEnum | ArtistaScalarFieldEnum[]
  }

  /**
   * Artista findFirstOrThrow
   */
  export type ArtistaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter, which Artista to fetch.
     */
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     */
    orderBy?: ArtistaOrderByWithRelationInput | ArtistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Artistas.
     */
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Artistas.
     */
    distinct?: ArtistaScalarFieldEnum | ArtistaScalarFieldEnum[]
  }

  /**
   * Artista findMany
   */
  export type ArtistaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter, which Artistas to fetch.
     */
    where?: ArtistaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Artistas to fetch.
     */
    orderBy?: ArtistaOrderByWithRelationInput | ArtistaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Artistas.
     */
    cursor?: ArtistaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Artistas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Artistas.
     */
    skip?: number
    distinct?: ArtistaScalarFieldEnum | ArtistaScalarFieldEnum[]
  }

  /**
   * Artista create
   */
  export type ArtistaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * The data needed to create a Artista.
     */
    data: XOR<ArtistaCreateInput, ArtistaUncheckedCreateInput>
  }

  /**
   * Artista createMany
   */
  export type ArtistaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Artistas.
     */
    data: ArtistaCreateManyInput | ArtistaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Artista createManyAndReturn
   */
  export type ArtistaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * The data used to create many Artistas.
     */
    data: ArtistaCreateManyInput | ArtistaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Artista update
   */
  export type ArtistaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * The data needed to update a Artista.
     */
    data: XOR<ArtistaUpdateInput, ArtistaUncheckedUpdateInput>
    /**
     * Choose, which Artista to update.
     */
    where: ArtistaWhereUniqueInput
  }

  /**
   * Artista updateMany
   */
  export type ArtistaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Artistas.
     */
    data: XOR<ArtistaUpdateManyMutationInput, ArtistaUncheckedUpdateManyInput>
    /**
     * Filter which Artistas to update
     */
    where?: ArtistaWhereInput
    /**
     * Limit how many Artistas to update.
     */
    limit?: number
  }

  /**
   * Artista updateManyAndReturn
   */
  export type ArtistaUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * The data used to update Artistas.
     */
    data: XOR<ArtistaUpdateManyMutationInput, ArtistaUncheckedUpdateManyInput>
    /**
     * Filter which Artistas to update
     */
    where?: ArtistaWhereInput
    /**
     * Limit how many Artistas to update.
     */
    limit?: number
  }

  /**
   * Artista upsert
   */
  export type ArtistaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * The filter to search for the Artista to update in case it exists.
     */
    where: ArtistaWhereUniqueInput
    /**
     * In case the Artista found by the `where` argument doesn't exist, create a new Artista with this data.
     */
    create: XOR<ArtistaCreateInput, ArtistaUncheckedCreateInput>
    /**
     * In case the Artista was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArtistaUpdateInput, ArtistaUncheckedUpdateInput>
  }

  /**
   * Artista delete
   */
  export type ArtistaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
    /**
     * Filter which Artista to delete.
     */
    where: ArtistaWhereUniqueInput
  }

  /**
   * Artista deleteMany
   */
  export type ArtistaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Artistas to delete
     */
    where?: ArtistaWhereInput
    /**
     * Limit how many Artistas to delete.
     */
    limit?: number
  }

  /**
   * Artista.albumes
   */
  export type Artista$albumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    cursor?: AlbumWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Artista without action
   */
  export type ArtistaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Artista
     */
    select?: ArtistaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Artista
     */
    omit?: ArtistaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ArtistaInclude<ExtArgs> | null
  }


  /**
   * Model Album
   */

  export type AggregateAlbum = {
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  export type AlbumMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    fechaLanzamiento: Date | null
    portada: string | null
    artistaId: string | null
  }

  export type AlbumMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    fechaLanzamiento: Date | null
    portada: string | null
    artistaId: string | null
  }

  export type AlbumCountAggregateOutputType = {
    id: number
    titulo: number
    fechaLanzamiento: number
    portada: number
    artistaId: number
    _all: number
  }


  export type AlbumMinAggregateInputType = {
    id?: true
    titulo?: true
    fechaLanzamiento?: true
    portada?: true
    artistaId?: true
  }

  export type AlbumMaxAggregateInputType = {
    id?: true
    titulo?: true
    fechaLanzamiento?: true
    portada?: true
    artistaId?: true
  }

  export type AlbumCountAggregateInputType = {
    id?: true
    titulo?: true
    fechaLanzamiento?: true
    portada?: true
    artistaId?: true
    _all?: true
  }

  export type AlbumAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Album to aggregate.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Albums
    **/
    _count?: true | AlbumCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumMaxAggregateInputType
  }

  export type GetAlbumAggregateType<T extends AlbumAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbum]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbum[P]>
      : GetScalarType<T[P], AggregateAlbum[P]>
  }




  export type AlbumGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumWhereInput
    orderBy?: AlbumOrderByWithAggregationInput | AlbumOrderByWithAggregationInput[]
    by: AlbumScalarFieldEnum[] | AlbumScalarFieldEnum
    having?: AlbumScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumCountAggregateInputType | true
    _min?: AlbumMinAggregateInputType
    _max?: AlbumMaxAggregateInputType
  }

  export type AlbumGroupByOutputType = {
    id: string
    titulo: string
    fechaLanzamiento: Date
    portada: string | null
    artistaId: string
    _count: AlbumCountAggregateOutputType | null
    _min: AlbumMinAggregateOutputType | null
    _max: AlbumMaxAggregateOutputType | null
  }

  type GetAlbumGroupByPayload<T extends AlbumGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumGroupByOutputType[P]>
        }
      >
    >


  export type AlbumSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    fechaLanzamiento?: boolean
    portada?: boolean
    artistaId?: boolean
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
    canciones?: boolean | Album$cancionesArgs<ExtArgs>
    generos?: boolean | Album$generosArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    fechaLanzamiento?: boolean
    portada?: boolean
    artistaId?: boolean
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    fechaLanzamiento?: boolean
    portada?: boolean
    artistaId?: boolean
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["album"]>

  export type AlbumSelectScalar = {
    id?: boolean
    titulo?: boolean
    fechaLanzamiento?: boolean
    portada?: boolean
    artistaId?: boolean
  }

  export type AlbumOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "fechaLanzamiento" | "portada" | "artistaId", ExtArgs["result"]["album"]>
  export type AlbumInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
    canciones?: boolean | Album$cancionesArgs<ExtArgs>
    generos?: boolean | Album$generosArgs<ExtArgs>
    _count?: boolean | AlbumCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
  }
  export type AlbumIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    artista?: boolean | ArtistaDefaultArgs<ExtArgs>
  }

  export type $AlbumPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Album"
    objects: {
      artista: Prisma.$ArtistaPayload<ExtArgs>
      canciones: Prisma.$CancionPayload<ExtArgs>[]
      generos: Prisma.$AlbumesEnGenerosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titulo: string
      fechaLanzamiento: Date
      portada: string | null
      artistaId: string
    }, ExtArgs["result"]["album"]>
    composites: {}
  }

  type AlbumGetPayload<S extends boolean | null | undefined | AlbumDefaultArgs> = $Result.GetResult<Prisma.$AlbumPayload, S>

  type AlbumCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumCountAggregateInputType | true
    }

  export interface AlbumDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Album'], meta: { name: 'Album' } }
    /**
     * Find zero or one Album that matches the filter.
     * @param {AlbumFindUniqueArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumFindUniqueArgs>(args: SelectSubset<T, AlbumFindUniqueArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Album that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumFindUniqueOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumFindFirstArgs>(args?: SelectSubset<T, AlbumFindFirstArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Album that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindFirstOrThrowArgs} args - Arguments to find a Album
     * @example
     * // Get one Album
     * const album = await prisma.album.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Albums that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Albums
     * const albums = await prisma.album.findMany()
     * 
     * // Get first 10 Albums
     * const albums = await prisma.album.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const albumWithIdOnly = await prisma.album.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AlbumFindManyArgs>(args?: SelectSubset<T, AlbumFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Album.
     * @param {AlbumCreateArgs} args - Arguments to create a Album.
     * @example
     * // Create one Album
     * const Album = await prisma.album.create({
     *   data: {
     *     // ... data to create a Album
     *   }
     * })
     * 
     */
    create<T extends AlbumCreateArgs>(args: SelectSubset<T, AlbumCreateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Albums.
     * @param {AlbumCreateManyArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumCreateManyArgs>(args?: SelectSubset<T, AlbumCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Albums and returns the data saved in the database.
     * @param {AlbumCreateManyAndReturnArgs} args - Arguments to create many Albums.
     * @example
     * // Create many Albums
     * const album = await prisma.album.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Album.
     * @param {AlbumDeleteArgs} args - Arguments to delete one Album.
     * @example
     * // Delete one Album
     * const Album = await prisma.album.delete({
     *   where: {
     *     // ... filter to delete one Album
     *   }
     * })
     * 
     */
    delete<T extends AlbumDeleteArgs>(args: SelectSubset<T, AlbumDeleteArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Album.
     * @param {AlbumUpdateArgs} args - Arguments to update one Album.
     * @example
     * // Update one Album
     * const album = await prisma.album.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumUpdateArgs>(args: SelectSubset<T, AlbumUpdateArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Albums.
     * @param {AlbumDeleteManyArgs} args - Arguments to filter Albums to delete.
     * @example
     * // Delete a few Albums
     * const { count } = await prisma.album.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumDeleteManyArgs>(args?: SelectSubset<T, AlbumDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumUpdateManyArgs>(args: SelectSubset<T, AlbumUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Albums and returns the data updated in the database.
     * @param {AlbumUpdateManyAndReturnArgs} args - Arguments to update many Albums.
     * @example
     * // Update many Albums
     * const album = await prisma.album.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Albums and only return the `id`
     * const albumWithIdOnly = await prisma.album.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlbumUpdateManyAndReturnArgs>(args: SelectSubset<T, AlbumUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Album.
     * @param {AlbumUpsertArgs} args - Arguments to update or create a Album.
     * @example
     * // Update or create a Album
     * const album = await prisma.album.upsert({
     *   create: {
     *     // ... data to create a Album
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Album we want to update
     *   }
     * })
     */
    upsert<T extends AlbumUpsertArgs>(args: SelectSubset<T, AlbumUpsertArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Albums.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumCountArgs} args - Arguments to filter Albums to count.
     * @example
     * // Count the number of Albums
     * const count = await prisma.album.count({
     *   where: {
     *     // ... the filter for the Albums we want to count
     *   }
     * })
    **/
    count<T extends AlbumCountArgs>(
      args?: Subset<T, AlbumCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumAggregateArgs>(args: Subset<T, AlbumAggregateArgs>): Prisma.PrismaPromise<GetAlbumAggregateType<T>>

    /**
     * Group by Album.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumGroupByArgs['orderBy'] }
        : { orderBy?: AlbumGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Album model
   */
  readonly fields: AlbumFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Album.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    artista<T extends ArtistaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ArtistaDefaultArgs<ExtArgs>>): Prisma__ArtistaClient<$Result.GetResult<Prisma.$ArtistaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    canciones<T extends Album$cancionesArgs<ExtArgs> = {}>(args?: Subset<T, Album$cancionesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    generos<T extends Album$generosArgs<ExtArgs> = {}>(args?: Subset<T, Album$generosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Album model
   */
  interface AlbumFieldRefs {
    readonly id: FieldRef<"Album", 'String'>
    readonly titulo: FieldRef<"Album", 'String'>
    readonly fechaLanzamiento: FieldRef<"Album", 'DateTime'>
    readonly portada: FieldRef<"Album", 'String'>
    readonly artistaId: FieldRef<"Album", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Album findUnique
   */
  export type AlbumFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findUniqueOrThrow
   */
  export type AlbumFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album findFirst
   */
  export type AlbumFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findFirstOrThrow
   */
  export type AlbumFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Album to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Albums.
     */
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album findMany
   */
  export type AlbumFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter, which Albums to fetch.
     */
    where?: AlbumWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Albums to fetch.
     */
    orderBy?: AlbumOrderByWithRelationInput | AlbumOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Albums.
     */
    cursor?: AlbumWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Albums from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Albums.
     */
    skip?: number
    distinct?: AlbumScalarFieldEnum | AlbumScalarFieldEnum[]
  }

  /**
   * Album create
   */
  export type AlbumCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to create a Album.
     */
    data: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
  }

  /**
   * Album createMany
   */
  export type AlbumCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Album createManyAndReturn
   */
  export type AlbumCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to create many Albums.
     */
    data: AlbumCreateManyInput | AlbumCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album update
   */
  export type AlbumUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The data needed to update a Album.
     */
    data: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
    /**
     * Choose, which Album to update.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album updateMany
   */
  export type AlbumUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
  }

  /**
   * Album updateManyAndReturn
   */
  export type AlbumUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * The data used to update Albums.
     */
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyInput>
    /**
     * Filter which Albums to update
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Album upsert
   */
  export type AlbumUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * The filter to search for the Album to update in case it exists.
     */
    where: AlbumWhereUniqueInput
    /**
     * In case the Album found by the `where` argument doesn't exist, create a new Album with this data.
     */
    create: XOR<AlbumCreateInput, AlbumUncheckedCreateInput>
    /**
     * In case the Album was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumUpdateInput, AlbumUncheckedUpdateInput>
  }

  /**
   * Album delete
   */
  export type AlbumDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
    /**
     * Filter which Album to delete.
     */
    where: AlbumWhereUniqueInput
  }

  /**
   * Album deleteMany
   */
  export type AlbumDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Albums to delete
     */
    where?: AlbumWhereInput
    /**
     * Limit how many Albums to delete.
     */
    limit?: number
  }

  /**
   * Album.canciones
   */
  export type Album$cancionesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    where?: CancionWhereInput
    orderBy?: CancionOrderByWithRelationInput | CancionOrderByWithRelationInput[]
    cursor?: CancionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CancionScalarFieldEnum | CancionScalarFieldEnum[]
  }

  /**
   * Album.generos
   */
  export type Album$generosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    where?: AlbumesEnGenerosWhereInput
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    cursor?: AlbumesEnGenerosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumesEnGenerosScalarFieldEnum | AlbumesEnGenerosScalarFieldEnum[]
  }

  /**
   * Album without action
   */
  export type AlbumDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Album
     */
    select?: AlbumSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Album
     */
    omit?: AlbumOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumInclude<ExtArgs> | null
  }


  /**
   * Model Cancion
   */

  export type AggregateCancion = {
    _count: CancionCountAggregateOutputType | null
    _avg: CancionAvgAggregateOutputType | null
    _sum: CancionSumAggregateOutputType | null
    _min: CancionMinAggregateOutputType | null
    _max: CancionMaxAggregateOutputType | null
  }

  export type CancionAvgAggregateOutputType = {
    duracion: number | null
  }

  export type CancionSumAggregateOutputType = {
    duracion: number | null
  }

  export type CancionMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    duracion: number | null
    esFavorito: boolean | null
    albumId: string | null
  }

  export type CancionMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    duracion: number | null
    esFavorito: boolean | null
    albumId: string | null
  }

  export type CancionCountAggregateOutputType = {
    id: number
    titulo: number
    duracion: number
    esFavorito: number
    albumId: number
    _all: number
  }


  export type CancionAvgAggregateInputType = {
    duracion?: true
  }

  export type CancionSumAggregateInputType = {
    duracion?: true
  }

  export type CancionMinAggregateInputType = {
    id?: true
    titulo?: true
    duracion?: true
    esFavorito?: true
    albumId?: true
  }

  export type CancionMaxAggregateInputType = {
    id?: true
    titulo?: true
    duracion?: true
    esFavorito?: true
    albumId?: true
  }

  export type CancionCountAggregateInputType = {
    id?: true
    titulo?: true
    duracion?: true
    esFavorito?: true
    albumId?: true
    _all?: true
  }

  export type CancionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cancion to aggregate.
     */
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     */
    orderBy?: CancionOrderByWithRelationInput | CancionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cancions
    **/
    _count?: true | CancionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CancionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CancionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CancionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CancionMaxAggregateInputType
  }

  export type GetCancionAggregateType<T extends CancionAggregateArgs> = {
        [P in keyof T & keyof AggregateCancion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCancion[P]>
      : GetScalarType<T[P], AggregateCancion[P]>
  }




  export type CancionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CancionWhereInput
    orderBy?: CancionOrderByWithAggregationInput | CancionOrderByWithAggregationInput[]
    by: CancionScalarFieldEnum[] | CancionScalarFieldEnum
    having?: CancionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CancionCountAggregateInputType | true
    _avg?: CancionAvgAggregateInputType
    _sum?: CancionSumAggregateInputType
    _min?: CancionMinAggregateInputType
    _max?: CancionMaxAggregateInputType
  }

  export type CancionGroupByOutputType = {
    id: string
    titulo: string
    duracion: number
    esFavorito: boolean
    albumId: string
    _count: CancionCountAggregateOutputType | null
    _avg: CancionAvgAggregateOutputType | null
    _sum: CancionSumAggregateOutputType | null
    _min: CancionMinAggregateOutputType | null
    _max: CancionMaxAggregateOutputType | null
  }

  type GetCancionGroupByPayload<T extends CancionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CancionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CancionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CancionGroupByOutputType[P]>
            : GetScalarType<T[P], CancionGroupByOutputType[P]>
        }
      >
    >


  export type CancionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    duracion?: boolean
    esFavorito?: boolean
    albumId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cancion"]>

  export type CancionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    duracion?: boolean
    esFavorito?: boolean
    albumId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cancion"]>

  export type CancionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    duracion?: boolean
    esFavorito?: boolean
    albumId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cancion"]>

  export type CancionSelectScalar = {
    id?: boolean
    titulo?: boolean
    duracion?: boolean
    esFavorito?: boolean
    albumId?: boolean
  }

  export type CancionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "duracion" | "esFavorito" | "albumId", ExtArgs["result"]["cancion"]>
  export type CancionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }
  export type CancionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }
  export type CancionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
  }

  export type $CancionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cancion"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titulo: string
      duracion: number
      esFavorito: boolean
      albumId: string
    }, ExtArgs["result"]["cancion"]>
    composites: {}
  }

  type CancionGetPayload<S extends boolean | null | undefined | CancionDefaultArgs> = $Result.GetResult<Prisma.$CancionPayload, S>

  type CancionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CancionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CancionCountAggregateInputType | true
    }

  export interface CancionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cancion'], meta: { name: 'Cancion' } }
    /**
     * Find zero or one Cancion that matches the filter.
     * @param {CancionFindUniqueArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CancionFindUniqueArgs>(args: SelectSubset<T, CancionFindUniqueArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cancion that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CancionFindUniqueOrThrowArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CancionFindUniqueOrThrowArgs>(args: SelectSubset<T, CancionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cancion that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindFirstArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CancionFindFirstArgs>(args?: SelectSubset<T, CancionFindFirstArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cancion that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindFirstOrThrowArgs} args - Arguments to find a Cancion
     * @example
     * // Get one Cancion
     * const cancion = await prisma.cancion.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CancionFindFirstOrThrowArgs>(args?: SelectSubset<T, CancionFindFirstOrThrowArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cancions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cancions
     * const cancions = await prisma.cancion.findMany()
     * 
     * // Get first 10 Cancions
     * const cancions = await prisma.cancion.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cancionWithIdOnly = await prisma.cancion.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CancionFindManyArgs>(args?: SelectSubset<T, CancionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cancion.
     * @param {CancionCreateArgs} args - Arguments to create a Cancion.
     * @example
     * // Create one Cancion
     * const Cancion = await prisma.cancion.create({
     *   data: {
     *     // ... data to create a Cancion
     *   }
     * })
     * 
     */
    create<T extends CancionCreateArgs>(args: SelectSubset<T, CancionCreateArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cancions.
     * @param {CancionCreateManyArgs} args - Arguments to create many Cancions.
     * @example
     * // Create many Cancions
     * const cancion = await prisma.cancion.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CancionCreateManyArgs>(args?: SelectSubset<T, CancionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cancions and returns the data saved in the database.
     * @param {CancionCreateManyAndReturnArgs} args - Arguments to create many Cancions.
     * @example
     * // Create many Cancions
     * const cancion = await prisma.cancion.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cancions and only return the `id`
     * const cancionWithIdOnly = await prisma.cancion.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CancionCreateManyAndReturnArgs>(args?: SelectSubset<T, CancionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cancion.
     * @param {CancionDeleteArgs} args - Arguments to delete one Cancion.
     * @example
     * // Delete one Cancion
     * const Cancion = await prisma.cancion.delete({
     *   where: {
     *     // ... filter to delete one Cancion
     *   }
     * })
     * 
     */
    delete<T extends CancionDeleteArgs>(args: SelectSubset<T, CancionDeleteArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cancion.
     * @param {CancionUpdateArgs} args - Arguments to update one Cancion.
     * @example
     * // Update one Cancion
     * const cancion = await prisma.cancion.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CancionUpdateArgs>(args: SelectSubset<T, CancionUpdateArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cancions.
     * @param {CancionDeleteManyArgs} args - Arguments to filter Cancions to delete.
     * @example
     * // Delete a few Cancions
     * const { count } = await prisma.cancion.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CancionDeleteManyArgs>(args?: SelectSubset<T, CancionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cancions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cancions
     * const cancion = await prisma.cancion.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CancionUpdateManyArgs>(args: SelectSubset<T, CancionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cancions and returns the data updated in the database.
     * @param {CancionUpdateManyAndReturnArgs} args - Arguments to update many Cancions.
     * @example
     * // Update many Cancions
     * const cancion = await prisma.cancion.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cancions and only return the `id`
     * const cancionWithIdOnly = await prisma.cancion.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CancionUpdateManyAndReturnArgs>(args: SelectSubset<T, CancionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cancion.
     * @param {CancionUpsertArgs} args - Arguments to update or create a Cancion.
     * @example
     * // Update or create a Cancion
     * const cancion = await prisma.cancion.upsert({
     *   create: {
     *     // ... data to create a Cancion
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cancion we want to update
     *   }
     * })
     */
    upsert<T extends CancionUpsertArgs>(args: SelectSubset<T, CancionUpsertArgs<ExtArgs>>): Prisma__CancionClient<$Result.GetResult<Prisma.$CancionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cancions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionCountArgs} args - Arguments to filter Cancions to count.
     * @example
     * // Count the number of Cancions
     * const count = await prisma.cancion.count({
     *   where: {
     *     // ... the filter for the Cancions we want to count
     *   }
     * })
    **/
    count<T extends CancionCountArgs>(
      args?: Subset<T, CancionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CancionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cancion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CancionAggregateArgs>(args: Subset<T, CancionAggregateArgs>): Prisma.PrismaPromise<GetCancionAggregateType<T>>

    /**
     * Group by Cancion.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CancionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CancionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CancionGroupByArgs['orderBy'] }
        : { orderBy?: CancionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CancionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCancionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cancion model
   */
  readonly fields: CancionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cancion.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CancionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cancion model
   */
  interface CancionFieldRefs {
    readonly id: FieldRef<"Cancion", 'String'>
    readonly titulo: FieldRef<"Cancion", 'String'>
    readonly duracion: FieldRef<"Cancion", 'Int'>
    readonly esFavorito: FieldRef<"Cancion", 'Boolean'>
    readonly albumId: FieldRef<"Cancion", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Cancion findUnique
   */
  export type CancionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter, which Cancion to fetch.
     */
    where: CancionWhereUniqueInput
  }

  /**
   * Cancion findUniqueOrThrow
   */
  export type CancionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter, which Cancion to fetch.
     */
    where: CancionWhereUniqueInput
  }

  /**
   * Cancion findFirst
   */
  export type CancionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter, which Cancion to fetch.
     */
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     */
    orderBy?: CancionOrderByWithRelationInput | CancionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cancions.
     */
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cancions.
     */
    distinct?: CancionScalarFieldEnum | CancionScalarFieldEnum[]
  }

  /**
   * Cancion findFirstOrThrow
   */
  export type CancionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter, which Cancion to fetch.
     */
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     */
    orderBy?: CancionOrderByWithRelationInput | CancionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cancions.
     */
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cancions.
     */
    distinct?: CancionScalarFieldEnum | CancionScalarFieldEnum[]
  }

  /**
   * Cancion findMany
   */
  export type CancionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter, which Cancions to fetch.
     */
    where?: CancionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cancions to fetch.
     */
    orderBy?: CancionOrderByWithRelationInput | CancionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cancions.
     */
    cursor?: CancionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cancions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cancions.
     */
    skip?: number
    distinct?: CancionScalarFieldEnum | CancionScalarFieldEnum[]
  }

  /**
   * Cancion create
   */
  export type CancionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * The data needed to create a Cancion.
     */
    data: XOR<CancionCreateInput, CancionUncheckedCreateInput>
  }

  /**
   * Cancion createMany
   */
  export type CancionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cancions.
     */
    data: CancionCreateManyInput | CancionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cancion createManyAndReturn
   */
  export type CancionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * The data used to create many Cancions.
     */
    data: CancionCreateManyInput | CancionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cancion update
   */
  export type CancionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * The data needed to update a Cancion.
     */
    data: XOR<CancionUpdateInput, CancionUncheckedUpdateInput>
    /**
     * Choose, which Cancion to update.
     */
    where: CancionWhereUniqueInput
  }

  /**
   * Cancion updateMany
   */
  export type CancionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cancions.
     */
    data: XOR<CancionUpdateManyMutationInput, CancionUncheckedUpdateManyInput>
    /**
     * Filter which Cancions to update
     */
    where?: CancionWhereInput
    /**
     * Limit how many Cancions to update.
     */
    limit?: number
  }

  /**
   * Cancion updateManyAndReturn
   */
  export type CancionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * The data used to update Cancions.
     */
    data: XOR<CancionUpdateManyMutationInput, CancionUncheckedUpdateManyInput>
    /**
     * Filter which Cancions to update
     */
    where?: CancionWhereInput
    /**
     * Limit how many Cancions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Cancion upsert
   */
  export type CancionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * The filter to search for the Cancion to update in case it exists.
     */
    where: CancionWhereUniqueInput
    /**
     * In case the Cancion found by the `where` argument doesn't exist, create a new Cancion with this data.
     */
    create: XOR<CancionCreateInput, CancionUncheckedCreateInput>
    /**
     * In case the Cancion was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CancionUpdateInput, CancionUncheckedUpdateInput>
  }

  /**
   * Cancion delete
   */
  export type CancionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
    /**
     * Filter which Cancion to delete.
     */
    where: CancionWhereUniqueInput
  }

  /**
   * Cancion deleteMany
   */
  export type CancionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cancions to delete
     */
    where?: CancionWhereInput
    /**
     * Limit how many Cancions to delete.
     */
    limit?: number
  }

  /**
   * Cancion without action
   */
  export type CancionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cancion
     */
    select?: CancionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cancion
     */
    omit?: CancionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CancionInclude<ExtArgs> | null
  }


  /**
   * Model Genero
   */

  export type AggregateGenero = {
    _count: GeneroCountAggregateOutputType | null
    _avg: GeneroAvgAggregateOutputType | null
    _sum: GeneroSumAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  export type GeneroAvgAggregateOutputType = {
    id: number | null
  }

  export type GeneroSumAggregateOutputType = {
    id: number | null
  }

  export type GeneroMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
  }

  export type GeneroMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    imagen: string | null
  }

  export type GeneroCountAggregateOutputType = {
    id: number
    nombre: number
    imagen: number
    _all: number
  }


  export type GeneroAvgAggregateInputType = {
    id?: true
  }

  export type GeneroSumAggregateInputType = {
    id?: true
  }

  export type GeneroMinAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
  }

  export type GeneroMaxAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
  }

  export type GeneroCountAggregateInputType = {
    id?: true
    nombre?: true
    imagen?: true
    _all?: true
  }

  export type GeneroAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Genero to aggregate.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Generos
    **/
    _count?: true | GeneroCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GeneroAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GeneroSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GeneroMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GeneroMaxAggregateInputType
  }

  export type GetGeneroAggregateType<T extends GeneroAggregateArgs> = {
        [P in keyof T & keyof AggregateGenero]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenero[P]>
      : GetScalarType<T[P], AggregateGenero[P]>
  }




  export type GeneroGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GeneroWhereInput
    orderBy?: GeneroOrderByWithAggregationInput | GeneroOrderByWithAggregationInput[]
    by: GeneroScalarFieldEnum[] | GeneroScalarFieldEnum
    having?: GeneroScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GeneroCountAggregateInputType | true
    _avg?: GeneroAvgAggregateInputType
    _sum?: GeneroSumAggregateInputType
    _min?: GeneroMinAggregateInputType
    _max?: GeneroMaxAggregateInputType
  }

  export type GeneroGroupByOutputType = {
    id: number
    nombre: string
    imagen: string | null
    _count: GeneroCountAggregateOutputType | null
    _avg: GeneroAvgAggregateOutputType | null
    _sum: GeneroSumAggregateOutputType | null
    _min: GeneroMinAggregateOutputType | null
    _max: GeneroMaxAggregateOutputType | null
  }

  type GetGeneroGroupByPayload<T extends GeneroGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GeneroGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GeneroGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GeneroGroupByOutputType[P]>
            : GetScalarType<T[P], GeneroGroupByOutputType[P]>
        }
      >
    >


  export type GeneroSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    imagen?: boolean
    albumes?: boolean | Genero$albumesArgs<ExtArgs>
    _count?: boolean | GeneroCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["genero"]>

  export type GeneroSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    imagen?: boolean
  }, ExtArgs["result"]["genero"]>

  export type GeneroSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    imagen?: boolean
  }, ExtArgs["result"]["genero"]>

  export type GeneroSelectScalar = {
    id?: boolean
    nombre?: boolean
    imagen?: boolean
  }

  export type GeneroOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "imagen", ExtArgs["result"]["genero"]>
  export type GeneroInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    albumes?: boolean | Genero$albumesArgs<ExtArgs>
    _count?: boolean | GeneroCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GeneroIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type GeneroIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $GeneroPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Genero"
    objects: {
      albumes: Prisma.$AlbumesEnGenerosPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      imagen: string | null
    }, ExtArgs["result"]["genero"]>
    composites: {}
  }

  type GeneroGetPayload<S extends boolean | null | undefined | GeneroDefaultArgs> = $Result.GetResult<Prisma.$GeneroPayload, S>

  type GeneroCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GeneroFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GeneroCountAggregateInputType | true
    }

  export interface GeneroDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Genero'], meta: { name: 'Genero' } }
    /**
     * Find zero or one Genero that matches the filter.
     * @param {GeneroFindUniqueArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GeneroFindUniqueArgs>(args: SelectSubset<T, GeneroFindUniqueArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Genero that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GeneroFindUniqueOrThrowArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GeneroFindUniqueOrThrowArgs>(args: SelectSubset<T, GeneroFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genero that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindFirstArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GeneroFindFirstArgs>(args?: SelectSubset<T, GeneroFindFirstArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Genero that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindFirstOrThrowArgs} args - Arguments to find a Genero
     * @example
     * // Get one Genero
     * const genero = await prisma.genero.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GeneroFindFirstOrThrowArgs>(args?: SelectSubset<T, GeneroFindFirstOrThrowArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Generos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Generos
     * const generos = await prisma.genero.findMany()
     * 
     * // Get first 10 Generos
     * const generos = await prisma.genero.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const generoWithIdOnly = await prisma.genero.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GeneroFindManyArgs>(args?: SelectSubset<T, GeneroFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Genero.
     * @param {GeneroCreateArgs} args - Arguments to create a Genero.
     * @example
     * // Create one Genero
     * const Genero = await prisma.genero.create({
     *   data: {
     *     // ... data to create a Genero
     *   }
     * })
     * 
     */
    create<T extends GeneroCreateArgs>(args: SelectSubset<T, GeneroCreateArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Generos.
     * @param {GeneroCreateManyArgs} args - Arguments to create many Generos.
     * @example
     * // Create many Generos
     * const genero = await prisma.genero.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GeneroCreateManyArgs>(args?: SelectSubset<T, GeneroCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Generos and returns the data saved in the database.
     * @param {GeneroCreateManyAndReturnArgs} args - Arguments to create many Generos.
     * @example
     * // Create many Generos
     * const genero = await prisma.genero.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Generos and only return the `id`
     * const generoWithIdOnly = await prisma.genero.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GeneroCreateManyAndReturnArgs>(args?: SelectSubset<T, GeneroCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Genero.
     * @param {GeneroDeleteArgs} args - Arguments to delete one Genero.
     * @example
     * // Delete one Genero
     * const Genero = await prisma.genero.delete({
     *   where: {
     *     // ... filter to delete one Genero
     *   }
     * })
     * 
     */
    delete<T extends GeneroDeleteArgs>(args: SelectSubset<T, GeneroDeleteArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Genero.
     * @param {GeneroUpdateArgs} args - Arguments to update one Genero.
     * @example
     * // Update one Genero
     * const genero = await prisma.genero.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GeneroUpdateArgs>(args: SelectSubset<T, GeneroUpdateArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Generos.
     * @param {GeneroDeleteManyArgs} args - Arguments to filter Generos to delete.
     * @example
     * // Delete a few Generos
     * const { count } = await prisma.genero.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GeneroDeleteManyArgs>(args?: SelectSubset<T, GeneroDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Generos
     * const genero = await prisma.genero.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GeneroUpdateManyArgs>(args: SelectSubset<T, GeneroUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Generos and returns the data updated in the database.
     * @param {GeneroUpdateManyAndReturnArgs} args - Arguments to update many Generos.
     * @example
     * // Update many Generos
     * const genero = await prisma.genero.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Generos and only return the `id`
     * const generoWithIdOnly = await prisma.genero.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends GeneroUpdateManyAndReturnArgs>(args: SelectSubset<T, GeneroUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Genero.
     * @param {GeneroUpsertArgs} args - Arguments to update or create a Genero.
     * @example
     * // Update or create a Genero
     * const genero = await prisma.genero.upsert({
     *   create: {
     *     // ... data to create a Genero
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genero we want to update
     *   }
     * })
     */
    upsert<T extends GeneroUpsertArgs>(args: SelectSubset<T, GeneroUpsertArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Generos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroCountArgs} args - Arguments to filter Generos to count.
     * @example
     * // Count the number of Generos
     * const count = await prisma.genero.count({
     *   where: {
     *     // ... the filter for the Generos we want to count
     *   }
     * })
    **/
    count<T extends GeneroCountArgs>(
      args?: Subset<T, GeneroCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GeneroCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GeneroAggregateArgs>(args: Subset<T, GeneroAggregateArgs>): Prisma.PrismaPromise<GetGeneroAggregateType<T>>

    /**
     * Group by Genero.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GeneroGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GeneroGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GeneroGroupByArgs['orderBy'] }
        : { orderBy?: GeneroGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GeneroGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGeneroGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Genero model
   */
  readonly fields: GeneroFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Genero.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GeneroClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    albumes<T extends Genero$albumesArgs<ExtArgs> = {}>(args?: Subset<T, Genero$albumesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Genero model
   */
  interface GeneroFieldRefs {
    readonly id: FieldRef<"Genero", 'Int'>
    readonly nombre: FieldRef<"Genero", 'String'>
    readonly imagen: FieldRef<"Genero", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Genero findUnique
   */
  export type GeneroFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero findUniqueOrThrow
   */
  export type GeneroFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero findFirst
   */
  export type GeneroFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generos.
     */
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero findFirstOrThrow
   */
  export type GeneroFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Genero to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Generos.
     */
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero findMany
   */
  export type GeneroFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter, which Generos to fetch.
     */
    where?: GeneroWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Generos to fetch.
     */
    orderBy?: GeneroOrderByWithRelationInput | GeneroOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Generos.
     */
    cursor?: GeneroWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Generos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Generos.
     */
    skip?: number
    distinct?: GeneroScalarFieldEnum | GeneroScalarFieldEnum[]
  }

  /**
   * Genero create
   */
  export type GeneroCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The data needed to create a Genero.
     */
    data: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
  }

  /**
   * Genero createMany
   */
  export type GeneroCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Generos.
     */
    data: GeneroCreateManyInput | GeneroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genero createManyAndReturn
   */
  export type GeneroCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * The data used to create many Generos.
     */
    data: GeneroCreateManyInput | GeneroCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Genero update
   */
  export type GeneroUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The data needed to update a Genero.
     */
    data: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
    /**
     * Choose, which Genero to update.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero updateMany
   */
  export type GeneroUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Generos.
     */
    data: XOR<GeneroUpdateManyMutationInput, GeneroUncheckedUpdateManyInput>
    /**
     * Filter which Generos to update
     */
    where?: GeneroWhereInput
    /**
     * Limit how many Generos to update.
     */
    limit?: number
  }

  /**
   * Genero updateManyAndReturn
   */
  export type GeneroUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * The data used to update Generos.
     */
    data: XOR<GeneroUpdateManyMutationInput, GeneroUncheckedUpdateManyInput>
    /**
     * Filter which Generos to update
     */
    where?: GeneroWhereInput
    /**
     * Limit how many Generos to update.
     */
    limit?: number
  }

  /**
   * Genero upsert
   */
  export type GeneroUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * The filter to search for the Genero to update in case it exists.
     */
    where: GeneroWhereUniqueInput
    /**
     * In case the Genero found by the `where` argument doesn't exist, create a new Genero with this data.
     */
    create: XOR<GeneroCreateInput, GeneroUncheckedCreateInput>
    /**
     * In case the Genero was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GeneroUpdateInput, GeneroUncheckedUpdateInput>
  }

  /**
   * Genero delete
   */
  export type GeneroDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
    /**
     * Filter which Genero to delete.
     */
    where: GeneroWhereUniqueInput
  }

  /**
   * Genero deleteMany
   */
  export type GeneroDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Generos to delete
     */
    where?: GeneroWhereInput
    /**
     * Limit how many Generos to delete.
     */
    limit?: number
  }

  /**
   * Genero.albumes
   */
  export type Genero$albumesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    where?: AlbumesEnGenerosWhereInput
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    cursor?: AlbumesEnGenerosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AlbumesEnGenerosScalarFieldEnum | AlbumesEnGenerosScalarFieldEnum[]
  }

  /**
   * Genero without action
   */
  export type GeneroDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Genero
     */
    select?: GeneroSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Genero
     */
    omit?: GeneroOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GeneroInclude<ExtArgs> | null
  }


  /**
   * Model AlbumesEnGeneros
   */

  export type AggregateAlbumesEnGeneros = {
    _count: AlbumesEnGenerosCountAggregateOutputType | null
    _avg: AlbumesEnGenerosAvgAggregateOutputType | null
    _sum: AlbumesEnGenerosSumAggregateOutputType | null
    _min: AlbumesEnGenerosMinAggregateOutputType | null
    _max: AlbumesEnGenerosMaxAggregateOutputType | null
  }

  export type AlbumesEnGenerosAvgAggregateOutputType = {
    generoId: number | null
  }

  export type AlbumesEnGenerosSumAggregateOutputType = {
    generoId: number | null
  }

  export type AlbumesEnGenerosMinAggregateOutputType = {
    albumId: string | null
    generoId: number | null
  }

  export type AlbumesEnGenerosMaxAggregateOutputType = {
    albumId: string | null
    generoId: number | null
  }

  export type AlbumesEnGenerosCountAggregateOutputType = {
    albumId: number
    generoId: number
    _all: number
  }


  export type AlbumesEnGenerosAvgAggregateInputType = {
    generoId?: true
  }

  export type AlbumesEnGenerosSumAggregateInputType = {
    generoId?: true
  }

  export type AlbumesEnGenerosMinAggregateInputType = {
    albumId?: true
    generoId?: true
  }

  export type AlbumesEnGenerosMaxAggregateInputType = {
    albumId?: true
    generoId?: true
  }

  export type AlbumesEnGenerosCountAggregateInputType = {
    albumId?: true
    generoId?: true
    _all?: true
  }

  export type AlbumesEnGenerosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumesEnGeneros to aggregate.
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumesEnGeneros to fetch.
     */
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AlbumesEnGenerosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumesEnGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumesEnGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AlbumesEnGeneros
    **/
    _count?: true | AlbumesEnGenerosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AlbumesEnGenerosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AlbumesEnGenerosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AlbumesEnGenerosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AlbumesEnGenerosMaxAggregateInputType
  }

  export type GetAlbumesEnGenerosAggregateType<T extends AlbumesEnGenerosAggregateArgs> = {
        [P in keyof T & keyof AggregateAlbumesEnGeneros]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAlbumesEnGeneros[P]>
      : GetScalarType<T[P], AggregateAlbumesEnGeneros[P]>
  }




  export type AlbumesEnGenerosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AlbumesEnGenerosWhereInput
    orderBy?: AlbumesEnGenerosOrderByWithAggregationInput | AlbumesEnGenerosOrderByWithAggregationInput[]
    by: AlbumesEnGenerosScalarFieldEnum[] | AlbumesEnGenerosScalarFieldEnum
    having?: AlbumesEnGenerosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AlbumesEnGenerosCountAggregateInputType | true
    _avg?: AlbumesEnGenerosAvgAggregateInputType
    _sum?: AlbumesEnGenerosSumAggregateInputType
    _min?: AlbumesEnGenerosMinAggregateInputType
    _max?: AlbumesEnGenerosMaxAggregateInputType
  }

  export type AlbumesEnGenerosGroupByOutputType = {
    albumId: string
    generoId: number
    _count: AlbumesEnGenerosCountAggregateOutputType | null
    _avg: AlbumesEnGenerosAvgAggregateOutputType | null
    _sum: AlbumesEnGenerosSumAggregateOutputType | null
    _min: AlbumesEnGenerosMinAggregateOutputType | null
    _max: AlbumesEnGenerosMaxAggregateOutputType | null
  }

  type GetAlbumesEnGenerosGroupByPayload<T extends AlbumesEnGenerosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AlbumesEnGenerosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AlbumesEnGenerosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AlbumesEnGenerosGroupByOutputType[P]>
            : GetScalarType<T[P], AlbumesEnGenerosGroupByOutputType[P]>
        }
      >
    >


  export type AlbumesEnGenerosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    albumId?: boolean
    generoId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumesEnGeneros"]>

  export type AlbumesEnGenerosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    albumId?: boolean
    generoId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumesEnGeneros"]>

  export type AlbumesEnGenerosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    albumId?: boolean
    generoId?: boolean
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["albumesEnGeneros"]>

  export type AlbumesEnGenerosSelectScalar = {
    albumId?: boolean
    generoId?: boolean
  }

  export type AlbumesEnGenerosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"albumId" | "generoId", ExtArgs["result"]["albumesEnGeneros"]>
  export type AlbumesEnGenerosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }
  export type AlbumesEnGenerosIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }
  export type AlbumesEnGenerosIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    album?: boolean | AlbumDefaultArgs<ExtArgs>
    genero?: boolean | GeneroDefaultArgs<ExtArgs>
  }

  export type $AlbumesEnGenerosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AlbumesEnGeneros"
    objects: {
      album: Prisma.$AlbumPayload<ExtArgs>
      genero: Prisma.$GeneroPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      albumId: string
      generoId: number
    }, ExtArgs["result"]["albumesEnGeneros"]>
    composites: {}
  }

  type AlbumesEnGenerosGetPayload<S extends boolean | null | undefined | AlbumesEnGenerosDefaultArgs> = $Result.GetResult<Prisma.$AlbumesEnGenerosPayload, S>

  type AlbumesEnGenerosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AlbumesEnGenerosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AlbumesEnGenerosCountAggregateInputType | true
    }

  export interface AlbumesEnGenerosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AlbumesEnGeneros'], meta: { name: 'AlbumesEnGeneros' } }
    /**
     * Find zero or one AlbumesEnGeneros that matches the filter.
     * @param {AlbumesEnGenerosFindUniqueArgs} args - Arguments to find a AlbumesEnGeneros
     * @example
     * // Get one AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AlbumesEnGenerosFindUniqueArgs>(args: SelectSubset<T, AlbumesEnGenerosFindUniqueArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AlbumesEnGeneros that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AlbumesEnGenerosFindUniqueOrThrowArgs} args - Arguments to find a AlbumesEnGeneros
     * @example
     * // Get one AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AlbumesEnGenerosFindUniqueOrThrowArgs>(args: SelectSubset<T, AlbumesEnGenerosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlbumesEnGeneros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosFindFirstArgs} args - Arguments to find a AlbumesEnGeneros
     * @example
     * // Get one AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AlbumesEnGenerosFindFirstArgs>(args?: SelectSubset<T, AlbumesEnGenerosFindFirstArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AlbumesEnGeneros that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosFindFirstOrThrowArgs} args - Arguments to find a AlbumesEnGeneros
     * @example
     * // Get one AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AlbumesEnGenerosFindFirstOrThrowArgs>(args?: SelectSubset<T, AlbumesEnGenerosFindFirstOrThrowArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AlbumesEnGeneros that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findMany()
     * 
     * // Get first 10 AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.findMany({ take: 10 })
     * 
     * // Only select the `albumId`
     * const albumesEnGenerosWithAlbumIdOnly = await prisma.albumesEnGeneros.findMany({ select: { albumId: true } })
     * 
     */
    findMany<T extends AlbumesEnGenerosFindManyArgs>(args?: SelectSubset<T, AlbumesEnGenerosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AlbumesEnGeneros.
     * @param {AlbumesEnGenerosCreateArgs} args - Arguments to create a AlbumesEnGeneros.
     * @example
     * // Create one AlbumesEnGeneros
     * const AlbumesEnGeneros = await prisma.albumesEnGeneros.create({
     *   data: {
     *     // ... data to create a AlbumesEnGeneros
     *   }
     * })
     * 
     */
    create<T extends AlbumesEnGenerosCreateArgs>(args: SelectSubset<T, AlbumesEnGenerosCreateArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AlbumesEnGeneros.
     * @param {AlbumesEnGenerosCreateManyArgs} args - Arguments to create many AlbumesEnGeneros.
     * @example
     * // Create many AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AlbumesEnGenerosCreateManyArgs>(args?: SelectSubset<T, AlbumesEnGenerosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AlbumesEnGeneros and returns the data saved in the database.
     * @param {AlbumesEnGenerosCreateManyAndReturnArgs} args - Arguments to create many AlbumesEnGeneros.
     * @example
     * // Create many AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AlbumesEnGeneros and only return the `albumId`
     * const albumesEnGenerosWithAlbumIdOnly = await prisma.albumesEnGeneros.createManyAndReturn({
     *   select: { albumId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AlbumesEnGenerosCreateManyAndReturnArgs>(args?: SelectSubset<T, AlbumesEnGenerosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AlbumesEnGeneros.
     * @param {AlbumesEnGenerosDeleteArgs} args - Arguments to delete one AlbumesEnGeneros.
     * @example
     * // Delete one AlbumesEnGeneros
     * const AlbumesEnGeneros = await prisma.albumesEnGeneros.delete({
     *   where: {
     *     // ... filter to delete one AlbumesEnGeneros
     *   }
     * })
     * 
     */
    delete<T extends AlbumesEnGenerosDeleteArgs>(args: SelectSubset<T, AlbumesEnGenerosDeleteArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AlbumesEnGeneros.
     * @param {AlbumesEnGenerosUpdateArgs} args - Arguments to update one AlbumesEnGeneros.
     * @example
     * // Update one AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AlbumesEnGenerosUpdateArgs>(args: SelectSubset<T, AlbumesEnGenerosUpdateArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AlbumesEnGeneros.
     * @param {AlbumesEnGenerosDeleteManyArgs} args - Arguments to filter AlbumesEnGeneros to delete.
     * @example
     * // Delete a few AlbumesEnGeneros
     * const { count } = await prisma.albumesEnGeneros.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AlbumesEnGenerosDeleteManyArgs>(args?: SelectSubset<T, AlbumesEnGenerosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlbumesEnGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AlbumesEnGenerosUpdateManyArgs>(args: SelectSubset<T, AlbumesEnGenerosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AlbumesEnGeneros and returns the data updated in the database.
     * @param {AlbumesEnGenerosUpdateManyAndReturnArgs} args - Arguments to update many AlbumesEnGeneros.
     * @example
     * // Update many AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AlbumesEnGeneros and only return the `albumId`
     * const albumesEnGenerosWithAlbumIdOnly = await prisma.albumesEnGeneros.updateManyAndReturn({
     *   select: { albumId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AlbumesEnGenerosUpdateManyAndReturnArgs>(args: SelectSubset<T, AlbumesEnGenerosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AlbumesEnGeneros.
     * @param {AlbumesEnGenerosUpsertArgs} args - Arguments to update or create a AlbumesEnGeneros.
     * @example
     * // Update or create a AlbumesEnGeneros
     * const albumesEnGeneros = await prisma.albumesEnGeneros.upsert({
     *   create: {
     *     // ... data to create a AlbumesEnGeneros
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AlbumesEnGeneros we want to update
     *   }
     * })
     */
    upsert<T extends AlbumesEnGenerosUpsertArgs>(args: SelectSubset<T, AlbumesEnGenerosUpsertArgs<ExtArgs>>): Prisma__AlbumesEnGenerosClient<$Result.GetResult<Prisma.$AlbumesEnGenerosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AlbumesEnGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosCountArgs} args - Arguments to filter AlbumesEnGeneros to count.
     * @example
     * // Count the number of AlbumesEnGeneros
     * const count = await prisma.albumesEnGeneros.count({
     *   where: {
     *     // ... the filter for the AlbumesEnGeneros we want to count
     *   }
     * })
    **/
    count<T extends AlbumesEnGenerosCountArgs>(
      args?: Subset<T, AlbumesEnGenerosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AlbumesEnGenerosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AlbumesEnGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AlbumesEnGenerosAggregateArgs>(args: Subset<T, AlbumesEnGenerosAggregateArgs>): Prisma.PrismaPromise<GetAlbumesEnGenerosAggregateType<T>>

    /**
     * Group by AlbumesEnGeneros.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AlbumesEnGenerosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AlbumesEnGenerosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AlbumesEnGenerosGroupByArgs['orderBy'] }
        : { orderBy?: AlbumesEnGenerosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AlbumesEnGenerosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAlbumesEnGenerosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AlbumesEnGeneros model
   */
  readonly fields: AlbumesEnGenerosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AlbumesEnGeneros.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AlbumesEnGenerosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    album<T extends AlbumDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AlbumDefaultArgs<ExtArgs>>): Prisma__AlbumClient<$Result.GetResult<Prisma.$AlbumPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    genero<T extends GeneroDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GeneroDefaultArgs<ExtArgs>>): Prisma__GeneroClient<$Result.GetResult<Prisma.$GeneroPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AlbumesEnGeneros model
   */
  interface AlbumesEnGenerosFieldRefs {
    readonly albumId: FieldRef<"AlbumesEnGeneros", 'String'>
    readonly generoId: FieldRef<"AlbumesEnGeneros", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AlbumesEnGeneros findUnique
   */
  export type AlbumesEnGenerosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter, which AlbumesEnGeneros to fetch.
     */
    where: AlbumesEnGenerosWhereUniqueInput
  }

  /**
   * AlbumesEnGeneros findUniqueOrThrow
   */
  export type AlbumesEnGenerosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter, which AlbumesEnGeneros to fetch.
     */
    where: AlbumesEnGenerosWhereUniqueInput
  }

  /**
   * AlbumesEnGeneros findFirst
   */
  export type AlbumesEnGenerosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter, which AlbumesEnGeneros to fetch.
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumesEnGeneros to fetch.
     */
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumesEnGeneros.
     */
    cursor?: AlbumesEnGenerosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumesEnGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumesEnGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumesEnGeneros.
     */
    distinct?: AlbumesEnGenerosScalarFieldEnum | AlbumesEnGenerosScalarFieldEnum[]
  }

  /**
   * AlbumesEnGeneros findFirstOrThrow
   */
  export type AlbumesEnGenerosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter, which AlbumesEnGeneros to fetch.
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumesEnGeneros to fetch.
     */
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AlbumesEnGeneros.
     */
    cursor?: AlbumesEnGenerosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumesEnGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumesEnGeneros.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AlbumesEnGeneros.
     */
    distinct?: AlbumesEnGenerosScalarFieldEnum | AlbumesEnGenerosScalarFieldEnum[]
  }

  /**
   * AlbumesEnGeneros findMany
   */
  export type AlbumesEnGenerosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter, which AlbumesEnGeneros to fetch.
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AlbumesEnGeneros to fetch.
     */
    orderBy?: AlbumesEnGenerosOrderByWithRelationInput | AlbumesEnGenerosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AlbumesEnGeneros.
     */
    cursor?: AlbumesEnGenerosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AlbumesEnGeneros from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AlbumesEnGeneros.
     */
    skip?: number
    distinct?: AlbumesEnGenerosScalarFieldEnum | AlbumesEnGenerosScalarFieldEnum[]
  }

  /**
   * AlbumesEnGeneros create
   */
  export type AlbumesEnGenerosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * The data needed to create a AlbumesEnGeneros.
     */
    data: XOR<AlbumesEnGenerosCreateInput, AlbumesEnGenerosUncheckedCreateInput>
  }

  /**
   * AlbumesEnGeneros createMany
   */
  export type AlbumesEnGenerosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AlbumesEnGeneros.
     */
    data: AlbumesEnGenerosCreateManyInput | AlbumesEnGenerosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AlbumesEnGeneros createManyAndReturn
   */
  export type AlbumesEnGenerosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * The data used to create many AlbumesEnGeneros.
     */
    data: AlbumesEnGenerosCreateManyInput | AlbumesEnGenerosCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlbumesEnGeneros update
   */
  export type AlbumesEnGenerosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * The data needed to update a AlbumesEnGeneros.
     */
    data: XOR<AlbumesEnGenerosUpdateInput, AlbumesEnGenerosUncheckedUpdateInput>
    /**
     * Choose, which AlbumesEnGeneros to update.
     */
    where: AlbumesEnGenerosWhereUniqueInput
  }

  /**
   * AlbumesEnGeneros updateMany
   */
  export type AlbumesEnGenerosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AlbumesEnGeneros.
     */
    data: XOR<AlbumesEnGenerosUpdateManyMutationInput, AlbumesEnGenerosUncheckedUpdateManyInput>
    /**
     * Filter which AlbumesEnGeneros to update
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * Limit how many AlbumesEnGeneros to update.
     */
    limit?: number
  }

  /**
   * AlbumesEnGeneros updateManyAndReturn
   */
  export type AlbumesEnGenerosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * The data used to update AlbumesEnGeneros.
     */
    data: XOR<AlbumesEnGenerosUpdateManyMutationInput, AlbumesEnGenerosUncheckedUpdateManyInput>
    /**
     * Filter which AlbumesEnGeneros to update
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * Limit how many AlbumesEnGeneros to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AlbumesEnGeneros upsert
   */
  export type AlbumesEnGenerosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * The filter to search for the AlbumesEnGeneros to update in case it exists.
     */
    where: AlbumesEnGenerosWhereUniqueInput
    /**
     * In case the AlbumesEnGeneros found by the `where` argument doesn't exist, create a new AlbumesEnGeneros with this data.
     */
    create: XOR<AlbumesEnGenerosCreateInput, AlbumesEnGenerosUncheckedCreateInput>
    /**
     * In case the AlbumesEnGeneros was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AlbumesEnGenerosUpdateInput, AlbumesEnGenerosUncheckedUpdateInput>
  }

  /**
   * AlbumesEnGeneros delete
   */
  export type AlbumesEnGenerosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
    /**
     * Filter which AlbumesEnGeneros to delete.
     */
    where: AlbumesEnGenerosWhereUniqueInput
  }

  /**
   * AlbumesEnGeneros deleteMany
   */
  export type AlbumesEnGenerosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AlbumesEnGeneros to delete
     */
    where?: AlbumesEnGenerosWhereInput
    /**
     * Limit how many AlbumesEnGeneros to delete.
     */
    limit?: number
  }

  /**
   * AlbumesEnGeneros without action
   */
  export type AlbumesEnGenerosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AlbumesEnGeneros
     */
    select?: AlbumesEnGenerosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AlbumesEnGeneros
     */
    omit?: AlbumesEnGenerosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AlbumesEnGenerosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ArtistaScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    portada: 'portada'
  };

  export type ArtistaScalarFieldEnum = (typeof ArtistaScalarFieldEnum)[keyof typeof ArtistaScalarFieldEnum]


  export const AlbumScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    fechaLanzamiento: 'fechaLanzamiento',
    portada: 'portada',
    artistaId: 'artistaId'
  };

  export type AlbumScalarFieldEnum = (typeof AlbumScalarFieldEnum)[keyof typeof AlbumScalarFieldEnum]


  export const CancionScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    duracion: 'duracion',
    esFavorito: 'esFavorito',
    albumId: 'albumId'
  };

  export type CancionScalarFieldEnum = (typeof CancionScalarFieldEnum)[keyof typeof CancionScalarFieldEnum]


  export const GeneroScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    imagen: 'imagen'
  };

  export type GeneroScalarFieldEnum = (typeof GeneroScalarFieldEnum)[keyof typeof GeneroScalarFieldEnum]


  export const AlbumesEnGenerosScalarFieldEnum: {
    albumId: 'albumId',
    generoId: 'generoId'
  };

  export type AlbumesEnGenerosScalarFieldEnum = (typeof AlbumesEnGenerosScalarFieldEnum)[keyof typeof AlbumesEnGenerosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ArtistaWhereInput = {
    AND?: ArtistaWhereInput | ArtistaWhereInput[]
    OR?: ArtistaWhereInput[]
    NOT?: ArtistaWhereInput | ArtistaWhereInput[]
    id?: StringFilter<"Artista"> | string
    nombre?: StringFilter<"Artista"> | string
    portada?: StringNullableFilter<"Artista"> | string | null
    albumes?: AlbumListRelationFilter
  }

  export type ArtistaOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    portada?: SortOrderInput | SortOrder
    albumes?: AlbumOrderByRelationAggregateInput
  }

  export type ArtistaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArtistaWhereInput | ArtistaWhereInput[]
    OR?: ArtistaWhereInput[]
    NOT?: ArtistaWhereInput | ArtistaWhereInput[]
    nombre?: StringFilter<"Artista"> | string
    portada?: StringNullableFilter<"Artista"> | string | null
    albumes?: AlbumListRelationFilter
  }, "id">

  export type ArtistaOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    portada?: SortOrderInput | SortOrder
    _count?: ArtistaCountOrderByAggregateInput
    _max?: ArtistaMaxOrderByAggregateInput
    _min?: ArtistaMinOrderByAggregateInput
  }

  export type ArtistaScalarWhereWithAggregatesInput = {
    AND?: ArtistaScalarWhereWithAggregatesInput | ArtistaScalarWhereWithAggregatesInput[]
    OR?: ArtistaScalarWhereWithAggregatesInput[]
    NOT?: ArtistaScalarWhereWithAggregatesInput | ArtistaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Artista"> | string
    nombre?: StringWithAggregatesFilter<"Artista"> | string
    portada?: StringNullableWithAggregatesFilter<"Artista"> | string | null
  }

  export type AlbumWhereInput = {
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    id?: StringFilter<"Album"> | string
    titulo?: StringFilter<"Album"> | string
    fechaLanzamiento?: DateTimeFilter<"Album"> | Date | string
    portada?: StringNullableFilter<"Album"> | string | null
    artistaId?: StringFilter<"Album"> | string
    artista?: XOR<ArtistaScalarRelationFilter, ArtistaWhereInput>
    canciones?: CancionListRelationFilter
    generos?: AlbumesEnGenerosListRelationFilter
  }

  export type AlbumOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    fechaLanzamiento?: SortOrder
    portada?: SortOrderInput | SortOrder
    artistaId?: SortOrder
    artista?: ArtistaOrderByWithRelationInput
    canciones?: CancionOrderByRelationAggregateInput
    generos?: AlbumesEnGenerosOrderByRelationAggregateInput
  }

  export type AlbumWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AlbumWhereInput | AlbumWhereInput[]
    OR?: AlbumWhereInput[]
    NOT?: AlbumWhereInput | AlbumWhereInput[]
    titulo?: StringFilter<"Album"> | string
    fechaLanzamiento?: DateTimeFilter<"Album"> | Date | string
    portada?: StringNullableFilter<"Album"> | string | null
    artistaId?: StringFilter<"Album"> | string
    artista?: XOR<ArtistaScalarRelationFilter, ArtistaWhereInput>
    canciones?: CancionListRelationFilter
    generos?: AlbumesEnGenerosListRelationFilter
  }, "id">

  export type AlbumOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    fechaLanzamiento?: SortOrder
    portada?: SortOrderInput | SortOrder
    artistaId?: SortOrder
    _count?: AlbumCountOrderByAggregateInput
    _max?: AlbumMaxOrderByAggregateInput
    _min?: AlbumMinOrderByAggregateInput
  }

  export type AlbumScalarWhereWithAggregatesInput = {
    AND?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    OR?: AlbumScalarWhereWithAggregatesInput[]
    NOT?: AlbumScalarWhereWithAggregatesInput | AlbumScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Album"> | string
    titulo?: StringWithAggregatesFilter<"Album"> | string
    fechaLanzamiento?: DateTimeWithAggregatesFilter<"Album"> | Date | string
    portada?: StringNullableWithAggregatesFilter<"Album"> | string | null
    artistaId?: StringWithAggregatesFilter<"Album"> | string
  }

  export type CancionWhereInput = {
    AND?: CancionWhereInput | CancionWhereInput[]
    OR?: CancionWhereInput[]
    NOT?: CancionWhereInput | CancionWhereInput[]
    id?: StringFilter<"Cancion"> | string
    titulo?: StringFilter<"Cancion"> | string
    duracion?: IntFilter<"Cancion"> | number
    esFavorito?: BoolFilter<"Cancion"> | boolean
    albumId?: StringFilter<"Cancion"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
  }

  export type CancionOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    duracion?: SortOrder
    esFavorito?: SortOrder
    albumId?: SortOrder
    album?: AlbumOrderByWithRelationInput
  }

  export type CancionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CancionWhereInput | CancionWhereInput[]
    OR?: CancionWhereInput[]
    NOT?: CancionWhereInput | CancionWhereInput[]
    titulo?: StringFilter<"Cancion"> | string
    duracion?: IntFilter<"Cancion"> | number
    esFavorito?: BoolFilter<"Cancion"> | boolean
    albumId?: StringFilter<"Cancion"> | string
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
  }, "id">

  export type CancionOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    duracion?: SortOrder
    esFavorito?: SortOrder
    albumId?: SortOrder
    _count?: CancionCountOrderByAggregateInput
    _avg?: CancionAvgOrderByAggregateInput
    _max?: CancionMaxOrderByAggregateInput
    _min?: CancionMinOrderByAggregateInput
    _sum?: CancionSumOrderByAggregateInput
  }

  export type CancionScalarWhereWithAggregatesInput = {
    AND?: CancionScalarWhereWithAggregatesInput | CancionScalarWhereWithAggregatesInput[]
    OR?: CancionScalarWhereWithAggregatesInput[]
    NOT?: CancionScalarWhereWithAggregatesInput | CancionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Cancion"> | string
    titulo?: StringWithAggregatesFilter<"Cancion"> | string
    duracion?: IntWithAggregatesFilter<"Cancion"> | number
    esFavorito?: BoolWithAggregatesFilter<"Cancion"> | boolean
    albumId?: StringWithAggregatesFilter<"Cancion"> | string
  }

  export type GeneroWhereInput = {
    AND?: GeneroWhereInput | GeneroWhereInput[]
    OR?: GeneroWhereInput[]
    NOT?: GeneroWhereInput | GeneroWhereInput[]
    id?: IntFilter<"Genero"> | number
    nombre?: StringFilter<"Genero"> | string
    imagen?: StringNullableFilter<"Genero"> | string | null
    albumes?: AlbumesEnGenerosListRelationFilter
  }

  export type GeneroOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrderInput | SortOrder
    albumes?: AlbumesEnGenerosOrderByRelationAggregateInput
  }

  export type GeneroWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    nombre?: string
    AND?: GeneroWhereInput | GeneroWhereInput[]
    OR?: GeneroWhereInput[]
    NOT?: GeneroWhereInput | GeneroWhereInput[]
    imagen?: StringNullableFilter<"Genero"> | string | null
    albumes?: AlbumesEnGenerosListRelationFilter
  }, "id" | "nombre">

  export type GeneroOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrderInput | SortOrder
    _count?: GeneroCountOrderByAggregateInput
    _avg?: GeneroAvgOrderByAggregateInput
    _max?: GeneroMaxOrderByAggregateInput
    _min?: GeneroMinOrderByAggregateInput
    _sum?: GeneroSumOrderByAggregateInput
  }

  export type GeneroScalarWhereWithAggregatesInput = {
    AND?: GeneroScalarWhereWithAggregatesInput | GeneroScalarWhereWithAggregatesInput[]
    OR?: GeneroScalarWhereWithAggregatesInput[]
    NOT?: GeneroScalarWhereWithAggregatesInput | GeneroScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Genero"> | number
    nombre?: StringWithAggregatesFilter<"Genero"> | string
    imagen?: StringNullableWithAggregatesFilter<"Genero"> | string | null
  }

  export type AlbumesEnGenerosWhereInput = {
    AND?: AlbumesEnGenerosWhereInput | AlbumesEnGenerosWhereInput[]
    OR?: AlbumesEnGenerosWhereInput[]
    NOT?: AlbumesEnGenerosWhereInput | AlbumesEnGenerosWhereInput[]
    albumId?: StringFilter<"AlbumesEnGeneros"> | string
    generoId?: IntFilter<"AlbumesEnGeneros"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    genero?: XOR<GeneroScalarRelationFilter, GeneroWhereInput>
  }

  export type AlbumesEnGenerosOrderByWithRelationInput = {
    albumId?: SortOrder
    generoId?: SortOrder
    album?: AlbumOrderByWithRelationInput
    genero?: GeneroOrderByWithRelationInput
  }

  export type AlbumesEnGenerosWhereUniqueInput = Prisma.AtLeast<{
    albumId_generoId?: AlbumesEnGenerosAlbumIdGeneroIdCompoundUniqueInput
    AND?: AlbumesEnGenerosWhereInput | AlbumesEnGenerosWhereInput[]
    OR?: AlbumesEnGenerosWhereInput[]
    NOT?: AlbumesEnGenerosWhereInput | AlbumesEnGenerosWhereInput[]
    albumId?: StringFilter<"AlbumesEnGeneros"> | string
    generoId?: IntFilter<"AlbumesEnGeneros"> | number
    album?: XOR<AlbumScalarRelationFilter, AlbumWhereInput>
    genero?: XOR<GeneroScalarRelationFilter, GeneroWhereInput>
  }, "albumId_generoId">

  export type AlbumesEnGenerosOrderByWithAggregationInput = {
    albumId?: SortOrder
    generoId?: SortOrder
    _count?: AlbumesEnGenerosCountOrderByAggregateInput
    _avg?: AlbumesEnGenerosAvgOrderByAggregateInput
    _max?: AlbumesEnGenerosMaxOrderByAggregateInput
    _min?: AlbumesEnGenerosMinOrderByAggregateInput
    _sum?: AlbumesEnGenerosSumOrderByAggregateInput
  }

  export type AlbumesEnGenerosScalarWhereWithAggregatesInput = {
    AND?: AlbumesEnGenerosScalarWhereWithAggregatesInput | AlbumesEnGenerosScalarWhereWithAggregatesInput[]
    OR?: AlbumesEnGenerosScalarWhereWithAggregatesInput[]
    NOT?: AlbumesEnGenerosScalarWhereWithAggregatesInput | AlbumesEnGenerosScalarWhereWithAggregatesInput[]
    albumId?: StringWithAggregatesFilter<"AlbumesEnGeneros"> | string
    generoId?: IntWithAggregatesFilter<"AlbumesEnGeneros"> | number
  }

  export type ArtistaCreateInput = {
    id?: string
    nombre: string
    portada?: string | null
    albumes?: AlbumCreateNestedManyWithoutArtistaInput
  }

  export type ArtistaUncheckedCreateInput = {
    id?: string
    nombre: string
    portada?: string | null
    albumes?: AlbumUncheckedCreateNestedManyWithoutArtistaInput
  }

  export type ArtistaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    albumes?: AlbumUpdateManyWithoutArtistaNestedInput
  }

  export type ArtistaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    albumes?: AlbumUncheckedUpdateManyWithoutArtistaNestedInput
  }

  export type ArtistaCreateManyInput = {
    id?: string
    nombre: string
    portada?: string | null
  }

  export type ArtistaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtistaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumCreateInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artista: ArtistaCreateNestedOneWithoutAlbumesInput
    canciones?: CancionCreateNestedManyWithoutAlbumInput
    generos?: AlbumesEnGenerosCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artistaId: string
    canciones?: CancionUncheckedCreateNestedManyWithoutAlbumInput
    generos?: AlbumesEnGenerosUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: ArtistaUpdateOneRequiredWithoutAlbumesNestedInput
    canciones?: CancionUpdateManyWithoutAlbumNestedInput
    generos?: AlbumesEnGenerosUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artistaId?: StringFieldUpdateOperationsInput | string
    canciones?: CancionUncheckedUpdateManyWithoutAlbumNestedInput
    generos?: AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumCreateManyInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artistaId: string
  }

  export type AlbumUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artistaId?: StringFieldUpdateOperationsInput | string
  }

  export type CancionCreateInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
    album: AlbumCreateNestedOneWithoutCancionesInput
  }

  export type CancionUncheckedCreateInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
    albumId: string
  }

  export type CancionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
    album?: AlbumUpdateOneRequiredWithoutCancionesNestedInput
  }

  export type CancionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type CancionCreateManyInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
    albumId: string
  }

  export type CancionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CancionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type GeneroCreateInput = {
    nombre: string
    imagen?: string | null
    albumes?: AlbumesEnGenerosCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUncheckedCreateInput = {
    id?: number
    nombre: string
    imagen?: string | null
    albumes?: AlbumesEnGenerosUncheckedCreateNestedManyWithoutGeneroInput
  }

  export type GeneroUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    albumes?: AlbumesEnGenerosUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
    albumes?: AlbumesEnGenerosUncheckedUpdateManyWithoutGeneroNestedInput
  }

  export type GeneroCreateManyInput = {
    id?: number
    nombre: string
    imagen?: string | null
  }

  export type GeneroUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GeneroUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumesEnGenerosCreateInput = {
    album: AlbumCreateNestedOneWithoutGenerosInput
    genero: GeneroCreateNestedOneWithoutAlbumesInput
  }

  export type AlbumesEnGenerosUncheckedCreateInput = {
    albumId: string
    generoId: number
  }

  export type AlbumesEnGenerosUpdateInput = {
    album?: AlbumUpdateOneRequiredWithoutGenerosNestedInput
    genero?: GeneroUpdateOneRequiredWithoutAlbumesNestedInput
  }

  export type AlbumesEnGenerosUncheckedUpdateInput = {
    albumId?: StringFieldUpdateOperationsInput | string
    generoId?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumesEnGenerosCreateManyInput = {
    albumId: string
    generoId: number
  }

  export type AlbumesEnGenerosUpdateManyMutationInput = {

  }

  export type AlbumesEnGenerosUncheckedUpdateManyInput = {
    albumId?: StringFieldUpdateOperationsInput | string
    generoId?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AlbumListRelationFilter = {
    every?: AlbumWhereInput
    some?: AlbumWhereInput
    none?: AlbumWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AlbumOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ArtistaCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    portada?: SortOrder
  }

  export type ArtistaMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    portada?: SortOrder
  }

  export type ArtistaMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    portada?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ArtistaScalarRelationFilter = {
    is?: ArtistaWhereInput
    isNot?: ArtistaWhereInput
  }

  export type CancionListRelationFilter = {
    every?: CancionWhereInput
    some?: CancionWhereInput
    none?: CancionWhereInput
  }

  export type AlbumesEnGenerosListRelationFilter = {
    every?: AlbumesEnGenerosWhereInput
    some?: AlbumesEnGenerosWhereInput
    none?: AlbumesEnGenerosWhereInput
  }

  export type CancionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumesEnGenerosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AlbumCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    fechaLanzamiento?: SortOrder
    portada?: SortOrder
    artistaId?: SortOrder
  }

  export type AlbumMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    fechaLanzamiento?: SortOrder
    portada?: SortOrder
    artistaId?: SortOrder
  }

  export type AlbumMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    fechaLanzamiento?: SortOrder
    portada?: SortOrder
    artistaId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type AlbumScalarRelationFilter = {
    is?: AlbumWhereInput
    isNot?: AlbumWhereInput
  }

  export type CancionCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    duracion?: SortOrder
    esFavorito?: SortOrder
    albumId?: SortOrder
  }

  export type CancionAvgOrderByAggregateInput = {
    duracion?: SortOrder
  }

  export type CancionMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    duracion?: SortOrder
    esFavorito?: SortOrder
    albumId?: SortOrder
  }

  export type CancionMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    duracion?: SortOrder
    esFavorito?: SortOrder
    albumId?: SortOrder
  }

  export type CancionSumOrderByAggregateInput = {
    duracion?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GeneroCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type GeneroAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GeneroMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type GeneroMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    imagen?: SortOrder
  }

  export type GeneroSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GeneroScalarRelationFilter = {
    is?: GeneroWhereInput
    isNot?: GeneroWhereInput
  }

  export type AlbumesEnGenerosAlbumIdGeneroIdCompoundUniqueInput = {
    albumId: string
    generoId: number
  }

  export type AlbumesEnGenerosCountOrderByAggregateInput = {
    albumId?: SortOrder
    generoId?: SortOrder
  }

  export type AlbumesEnGenerosAvgOrderByAggregateInput = {
    generoId?: SortOrder
  }

  export type AlbumesEnGenerosMaxOrderByAggregateInput = {
    albumId?: SortOrder
    generoId?: SortOrder
  }

  export type AlbumesEnGenerosMinOrderByAggregateInput = {
    albumId?: SortOrder
    generoId?: SortOrder
  }

  export type AlbumesEnGenerosSumOrderByAggregateInput = {
    generoId?: SortOrder
  }

  export type AlbumCreateNestedManyWithoutArtistaInput = {
    create?: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput> | AlbumCreateWithoutArtistaInput[] | AlbumUncheckedCreateWithoutArtistaInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutArtistaInput | AlbumCreateOrConnectWithoutArtistaInput[]
    createMany?: AlbumCreateManyArtistaInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type AlbumUncheckedCreateNestedManyWithoutArtistaInput = {
    create?: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput> | AlbumCreateWithoutArtistaInput[] | AlbumUncheckedCreateWithoutArtistaInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutArtistaInput | AlbumCreateOrConnectWithoutArtistaInput[]
    createMany?: AlbumCreateManyArtistaInputEnvelope
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type AlbumUpdateManyWithoutArtistaNestedInput = {
    create?: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput> | AlbumCreateWithoutArtistaInput[] | AlbumUncheckedCreateWithoutArtistaInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutArtistaInput | AlbumCreateOrConnectWithoutArtistaInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutArtistaInput | AlbumUpsertWithWhereUniqueWithoutArtistaInput[]
    createMany?: AlbumCreateManyArtistaInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutArtistaInput | AlbumUpdateWithWhereUniqueWithoutArtistaInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutArtistaInput | AlbumUpdateManyWithWhereWithoutArtistaInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type AlbumUncheckedUpdateManyWithoutArtistaNestedInput = {
    create?: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput> | AlbumCreateWithoutArtistaInput[] | AlbumUncheckedCreateWithoutArtistaInput[]
    connectOrCreate?: AlbumCreateOrConnectWithoutArtistaInput | AlbumCreateOrConnectWithoutArtistaInput[]
    upsert?: AlbumUpsertWithWhereUniqueWithoutArtistaInput | AlbumUpsertWithWhereUniqueWithoutArtistaInput[]
    createMany?: AlbumCreateManyArtistaInputEnvelope
    set?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    disconnect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    delete?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    connect?: AlbumWhereUniqueInput | AlbumWhereUniqueInput[]
    update?: AlbumUpdateWithWhereUniqueWithoutArtistaInput | AlbumUpdateWithWhereUniqueWithoutArtistaInput[]
    updateMany?: AlbumUpdateManyWithWhereWithoutArtistaInput | AlbumUpdateManyWithWhereWithoutArtistaInput[]
    deleteMany?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
  }

  export type ArtistaCreateNestedOneWithoutAlbumesInput = {
    create?: XOR<ArtistaCreateWithoutAlbumesInput, ArtistaUncheckedCreateWithoutAlbumesInput>
    connectOrCreate?: ArtistaCreateOrConnectWithoutAlbumesInput
    connect?: ArtistaWhereUniqueInput
  }

  export type CancionCreateNestedManyWithoutAlbumInput = {
    create?: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput> | CancionCreateWithoutAlbumInput[] | CancionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: CancionCreateOrConnectWithoutAlbumInput | CancionCreateOrConnectWithoutAlbumInput[]
    createMany?: CancionCreateManyAlbumInputEnvelope
    connect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
  }

  export type AlbumesEnGenerosCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput> | AlbumesEnGenerosCreateWithoutAlbumInput[] | AlbumesEnGenerosUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutAlbumInput | AlbumesEnGenerosCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumesEnGenerosCreateManyAlbumInputEnvelope
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
  }

  export type CancionUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput> | CancionCreateWithoutAlbumInput[] | CancionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: CancionCreateOrConnectWithoutAlbumInput | CancionCreateOrConnectWithoutAlbumInput[]
    createMany?: CancionCreateManyAlbumInputEnvelope
    connect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
  }

  export type AlbumesEnGenerosUncheckedCreateNestedManyWithoutAlbumInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput> | AlbumesEnGenerosCreateWithoutAlbumInput[] | AlbumesEnGenerosUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutAlbumInput | AlbumesEnGenerosCreateOrConnectWithoutAlbumInput[]
    createMany?: AlbumesEnGenerosCreateManyAlbumInputEnvelope
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ArtistaUpdateOneRequiredWithoutAlbumesNestedInput = {
    create?: XOR<ArtistaCreateWithoutAlbumesInput, ArtistaUncheckedCreateWithoutAlbumesInput>
    connectOrCreate?: ArtistaCreateOrConnectWithoutAlbumesInput
    upsert?: ArtistaUpsertWithoutAlbumesInput
    connect?: ArtistaWhereUniqueInput
    update?: XOR<XOR<ArtistaUpdateToOneWithWhereWithoutAlbumesInput, ArtistaUpdateWithoutAlbumesInput>, ArtistaUncheckedUpdateWithoutAlbumesInput>
  }

  export type CancionUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput> | CancionCreateWithoutAlbumInput[] | CancionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: CancionCreateOrConnectWithoutAlbumInput | CancionCreateOrConnectWithoutAlbumInput[]
    upsert?: CancionUpsertWithWhereUniqueWithoutAlbumInput | CancionUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: CancionCreateManyAlbumInputEnvelope
    set?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    disconnect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    delete?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    connect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    update?: CancionUpdateWithWhereUniqueWithoutAlbumInput | CancionUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: CancionUpdateManyWithWhereWithoutAlbumInput | CancionUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: CancionScalarWhereInput | CancionScalarWhereInput[]
  }

  export type AlbumesEnGenerosUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput> | AlbumesEnGenerosCreateWithoutAlbumInput[] | AlbumesEnGenerosUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutAlbumInput | AlbumesEnGenerosCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumesEnGenerosUpsertWithWhereUniqueWithoutAlbumInput | AlbumesEnGenerosUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumesEnGenerosCreateManyAlbumInputEnvelope
    set?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    disconnect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    delete?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    update?: AlbumesEnGenerosUpdateWithWhereUniqueWithoutAlbumInput | AlbumesEnGenerosUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumesEnGenerosUpdateManyWithWhereWithoutAlbumInput | AlbumesEnGenerosUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
  }

  export type CancionUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput> | CancionCreateWithoutAlbumInput[] | CancionUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: CancionCreateOrConnectWithoutAlbumInput | CancionCreateOrConnectWithoutAlbumInput[]
    upsert?: CancionUpsertWithWhereUniqueWithoutAlbumInput | CancionUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: CancionCreateManyAlbumInputEnvelope
    set?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    disconnect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    delete?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    connect?: CancionWhereUniqueInput | CancionWhereUniqueInput[]
    update?: CancionUpdateWithWhereUniqueWithoutAlbumInput | CancionUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: CancionUpdateManyWithWhereWithoutAlbumInput | CancionUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: CancionScalarWhereInput | CancionScalarWhereInput[]
  }

  export type AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumNestedInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput> | AlbumesEnGenerosCreateWithoutAlbumInput[] | AlbumesEnGenerosUncheckedCreateWithoutAlbumInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutAlbumInput | AlbumesEnGenerosCreateOrConnectWithoutAlbumInput[]
    upsert?: AlbumesEnGenerosUpsertWithWhereUniqueWithoutAlbumInput | AlbumesEnGenerosUpsertWithWhereUniqueWithoutAlbumInput[]
    createMany?: AlbumesEnGenerosCreateManyAlbumInputEnvelope
    set?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    disconnect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    delete?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    update?: AlbumesEnGenerosUpdateWithWhereUniqueWithoutAlbumInput | AlbumesEnGenerosUpdateWithWhereUniqueWithoutAlbumInput[]
    updateMany?: AlbumesEnGenerosUpdateManyWithWhereWithoutAlbumInput | AlbumesEnGenerosUpdateManyWithWhereWithoutAlbumInput[]
    deleteMany?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutCancionesInput = {
    create?: XOR<AlbumCreateWithoutCancionesInput, AlbumUncheckedCreateWithoutCancionesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutCancionesInput
    connect?: AlbumWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type AlbumUpdateOneRequiredWithoutCancionesNestedInput = {
    create?: XOR<AlbumCreateWithoutCancionesInput, AlbumUncheckedCreateWithoutCancionesInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutCancionesInput
    upsert?: AlbumUpsertWithoutCancionesInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutCancionesInput, AlbumUpdateWithoutCancionesInput>, AlbumUncheckedUpdateWithoutCancionesInput>
  }

  export type AlbumesEnGenerosCreateNestedManyWithoutGeneroInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput> | AlbumesEnGenerosCreateWithoutGeneroInput[] | AlbumesEnGenerosUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutGeneroInput | AlbumesEnGenerosCreateOrConnectWithoutGeneroInput[]
    createMany?: AlbumesEnGenerosCreateManyGeneroInputEnvelope
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
  }

  export type AlbumesEnGenerosUncheckedCreateNestedManyWithoutGeneroInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput> | AlbumesEnGenerosCreateWithoutGeneroInput[] | AlbumesEnGenerosUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutGeneroInput | AlbumesEnGenerosCreateOrConnectWithoutGeneroInput[]
    createMany?: AlbumesEnGenerosCreateManyGeneroInputEnvelope
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
  }

  export type AlbumesEnGenerosUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput> | AlbumesEnGenerosCreateWithoutGeneroInput[] | AlbumesEnGenerosUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutGeneroInput | AlbumesEnGenerosCreateOrConnectWithoutGeneroInput[]
    upsert?: AlbumesEnGenerosUpsertWithWhereUniqueWithoutGeneroInput | AlbumesEnGenerosUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: AlbumesEnGenerosCreateManyGeneroInputEnvelope
    set?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    disconnect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    delete?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    update?: AlbumesEnGenerosUpdateWithWhereUniqueWithoutGeneroInput | AlbumesEnGenerosUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: AlbumesEnGenerosUpdateManyWithWhereWithoutGeneroInput | AlbumesEnGenerosUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
  }

  export type AlbumesEnGenerosUncheckedUpdateManyWithoutGeneroNestedInput = {
    create?: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput> | AlbumesEnGenerosCreateWithoutGeneroInput[] | AlbumesEnGenerosUncheckedCreateWithoutGeneroInput[]
    connectOrCreate?: AlbumesEnGenerosCreateOrConnectWithoutGeneroInput | AlbumesEnGenerosCreateOrConnectWithoutGeneroInput[]
    upsert?: AlbumesEnGenerosUpsertWithWhereUniqueWithoutGeneroInput | AlbumesEnGenerosUpsertWithWhereUniqueWithoutGeneroInput[]
    createMany?: AlbumesEnGenerosCreateManyGeneroInputEnvelope
    set?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    disconnect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    delete?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    connect?: AlbumesEnGenerosWhereUniqueInput | AlbumesEnGenerosWhereUniqueInput[]
    update?: AlbumesEnGenerosUpdateWithWhereUniqueWithoutGeneroInput | AlbumesEnGenerosUpdateWithWhereUniqueWithoutGeneroInput[]
    updateMany?: AlbumesEnGenerosUpdateManyWithWhereWithoutGeneroInput | AlbumesEnGenerosUpdateManyWithWhereWithoutGeneroInput[]
    deleteMany?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
  }

  export type AlbumCreateNestedOneWithoutGenerosInput = {
    create?: XOR<AlbumCreateWithoutGenerosInput, AlbumUncheckedCreateWithoutGenerosInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutGenerosInput
    connect?: AlbumWhereUniqueInput
  }

  export type GeneroCreateNestedOneWithoutAlbumesInput = {
    create?: XOR<GeneroCreateWithoutAlbumesInput, GeneroUncheckedCreateWithoutAlbumesInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutAlbumesInput
    connect?: GeneroWhereUniqueInput
  }

  export type AlbumUpdateOneRequiredWithoutGenerosNestedInput = {
    create?: XOR<AlbumCreateWithoutGenerosInput, AlbumUncheckedCreateWithoutGenerosInput>
    connectOrCreate?: AlbumCreateOrConnectWithoutGenerosInput
    upsert?: AlbumUpsertWithoutGenerosInput
    connect?: AlbumWhereUniqueInput
    update?: XOR<XOR<AlbumUpdateToOneWithWhereWithoutGenerosInput, AlbumUpdateWithoutGenerosInput>, AlbumUncheckedUpdateWithoutGenerosInput>
  }

  export type GeneroUpdateOneRequiredWithoutAlbumesNestedInput = {
    create?: XOR<GeneroCreateWithoutAlbumesInput, GeneroUncheckedCreateWithoutAlbumesInput>
    connectOrCreate?: GeneroCreateOrConnectWithoutAlbumesInput
    upsert?: GeneroUpsertWithoutAlbumesInput
    connect?: GeneroWhereUniqueInput
    update?: XOR<XOR<GeneroUpdateToOneWithWhereWithoutAlbumesInput, GeneroUpdateWithoutAlbumesInput>, GeneroUncheckedUpdateWithoutAlbumesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type AlbumCreateWithoutArtistaInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    canciones?: CancionCreateNestedManyWithoutAlbumInput
    generos?: AlbumesEnGenerosCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutArtistaInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    canciones?: CancionUncheckedCreateNestedManyWithoutAlbumInput
    generos?: AlbumesEnGenerosUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput>
  }

  export type AlbumCreateManyArtistaInputEnvelope = {
    data: AlbumCreateManyArtistaInput | AlbumCreateManyArtistaInput[]
    skipDuplicates?: boolean
  }

  export type AlbumUpsertWithWhereUniqueWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    update: XOR<AlbumUpdateWithoutArtistaInput, AlbumUncheckedUpdateWithoutArtistaInput>
    create: XOR<AlbumCreateWithoutArtistaInput, AlbumUncheckedCreateWithoutArtistaInput>
  }

  export type AlbumUpdateWithWhereUniqueWithoutArtistaInput = {
    where: AlbumWhereUniqueInput
    data: XOR<AlbumUpdateWithoutArtistaInput, AlbumUncheckedUpdateWithoutArtistaInput>
  }

  export type AlbumUpdateManyWithWhereWithoutArtistaInput = {
    where: AlbumScalarWhereInput
    data: XOR<AlbumUpdateManyMutationInput, AlbumUncheckedUpdateManyWithoutArtistaInput>
  }

  export type AlbumScalarWhereInput = {
    AND?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    OR?: AlbumScalarWhereInput[]
    NOT?: AlbumScalarWhereInput | AlbumScalarWhereInput[]
    id?: StringFilter<"Album"> | string
    titulo?: StringFilter<"Album"> | string
    fechaLanzamiento?: DateTimeFilter<"Album"> | Date | string
    portada?: StringNullableFilter<"Album"> | string | null
    artistaId?: StringFilter<"Album"> | string
  }

  export type ArtistaCreateWithoutAlbumesInput = {
    id?: string
    nombre: string
    portada?: string | null
  }

  export type ArtistaUncheckedCreateWithoutAlbumesInput = {
    id?: string
    nombre: string
    portada?: string | null
  }

  export type ArtistaCreateOrConnectWithoutAlbumesInput = {
    where: ArtistaWhereUniqueInput
    create: XOR<ArtistaCreateWithoutAlbumesInput, ArtistaUncheckedCreateWithoutAlbumesInput>
  }

  export type CancionCreateWithoutAlbumInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
  }

  export type CancionUncheckedCreateWithoutAlbumInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
  }

  export type CancionCreateOrConnectWithoutAlbumInput = {
    where: CancionWhereUniqueInput
    create: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput>
  }

  export type CancionCreateManyAlbumInputEnvelope = {
    data: CancionCreateManyAlbumInput | CancionCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type AlbumesEnGenerosCreateWithoutAlbumInput = {
    genero: GeneroCreateNestedOneWithoutAlbumesInput
  }

  export type AlbumesEnGenerosUncheckedCreateWithoutAlbumInput = {
    generoId: number
  }

  export type AlbumesEnGenerosCreateOrConnectWithoutAlbumInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    create: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumesEnGenerosCreateManyAlbumInputEnvelope = {
    data: AlbumesEnGenerosCreateManyAlbumInput | AlbumesEnGenerosCreateManyAlbumInput[]
    skipDuplicates?: boolean
  }

  export type ArtistaUpsertWithoutAlbumesInput = {
    update: XOR<ArtistaUpdateWithoutAlbumesInput, ArtistaUncheckedUpdateWithoutAlbumesInput>
    create: XOR<ArtistaCreateWithoutAlbumesInput, ArtistaUncheckedCreateWithoutAlbumesInput>
    where?: ArtistaWhereInput
  }

  export type ArtistaUpdateToOneWithWhereWithoutAlbumesInput = {
    where?: ArtistaWhereInput
    data: XOR<ArtistaUpdateWithoutAlbumesInput, ArtistaUncheckedUpdateWithoutAlbumesInput>
  }

  export type ArtistaUpdateWithoutAlbumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ArtistaUncheckedUpdateWithoutAlbumesInput = {
    id?: StringFieldUpdateOperationsInput | string
    nombre?: StringFieldUpdateOperationsInput | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CancionUpsertWithWhereUniqueWithoutAlbumInput = {
    where: CancionWhereUniqueInput
    update: XOR<CancionUpdateWithoutAlbumInput, CancionUncheckedUpdateWithoutAlbumInput>
    create: XOR<CancionCreateWithoutAlbumInput, CancionUncheckedCreateWithoutAlbumInput>
  }

  export type CancionUpdateWithWhereUniqueWithoutAlbumInput = {
    where: CancionWhereUniqueInput
    data: XOR<CancionUpdateWithoutAlbumInput, CancionUncheckedUpdateWithoutAlbumInput>
  }

  export type CancionUpdateManyWithWhereWithoutAlbumInput = {
    where: CancionScalarWhereInput
    data: XOR<CancionUpdateManyMutationInput, CancionUncheckedUpdateManyWithoutAlbumInput>
  }

  export type CancionScalarWhereInput = {
    AND?: CancionScalarWhereInput | CancionScalarWhereInput[]
    OR?: CancionScalarWhereInput[]
    NOT?: CancionScalarWhereInput | CancionScalarWhereInput[]
    id?: StringFilter<"Cancion"> | string
    titulo?: StringFilter<"Cancion"> | string
    duracion?: IntFilter<"Cancion"> | number
    esFavorito?: BoolFilter<"Cancion"> | boolean
    albumId?: StringFilter<"Cancion"> | string
  }

  export type AlbumesEnGenerosUpsertWithWhereUniqueWithoutAlbumInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    update: XOR<AlbumesEnGenerosUpdateWithoutAlbumInput, AlbumesEnGenerosUncheckedUpdateWithoutAlbumInput>
    create: XOR<AlbumesEnGenerosCreateWithoutAlbumInput, AlbumesEnGenerosUncheckedCreateWithoutAlbumInput>
  }

  export type AlbumesEnGenerosUpdateWithWhereUniqueWithoutAlbumInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    data: XOR<AlbumesEnGenerosUpdateWithoutAlbumInput, AlbumesEnGenerosUncheckedUpdateWithoutAlbumInput>
  }

  export type AlbumesEnGenerosUpdateManyWithWhereWithoutAlbumInput = {
    where: AlbumesEnGenerosScalarWhereInput
    data: XOR<AlbumesEnGenerosUpdateManyMutationInput, AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumInput>
  }

  export type AlbumesEnGenerosScalarWhereInput = {
    AND?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
    OR?: AlbumesEnGenerosScalarWhereInput[]
    NOT?: AlbumesEnGenerosScalarWhereInput | AlbumesEnGenerosScalarWhereInput[]
    albumId?: StringFilter<"AlbumesEnGeneros"> | string
    generoId?: IntFilter<"AlbumesEnGeneros"> | number
  }

  export type AlbumCreateWithoutCancionesInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artista: ArtistaCreateNestedOneWithoutAlbumesInput
    generos?: AlbumesEnGenerosCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutCancionesInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artistaId: string
    generos?: AlbumesEnGenerosUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutCancionesInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutCancionesInput, AlbumUncheckedCreateWithoutCancionesInput>
  }

  export type AlbumUpsertWithoutCancionesInput = {
    update: XOR<AlbumUpdateWithoutCancionesInput, AlbumUncheckedUpdateWithoutCancionesInput>
    create: XOR<AlbumCreateWithoutCancionesInput, AlbumUncheckedCreateWithoutCancionesInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutCancionesInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutCancionesInput, AlbumUncheckedUpdateWithoutCancionesInput>
  }

  export type AlbumUpdateWithoutCancionesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: ArtistaUpdateOneRequiredWithoutAlbumesNestedInput
    generos?: AlbumesEnGenerosUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutCancionesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artistaId?: StringFieldUpdateOperationsInput | string
    generos?: AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumesEnGenerosCreateWithoutGeneroInput = {
    album: AlbumCreateNestedOneWithoutGenerosInput
  }

  export type AlbumesEnGenerosUncheckedCreateWithoutGeneroInput = {
    albumId: string
  }

  export type AlbumesEnGenerosCreateOrConnectWithoutGeneroInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    create: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput>
  }

  export type AlbumesEnGenerosCreateManyGeneroInputEnvelope = {
    data: AlbumesEnGenerosCreateManyGeneroInput | AlbumesEnGenerosCreateManyGeneroInput[]
    skipDuplicates?: boolean
  }

  export type AlbumesEnGenerosUpsertWithWhereUniqueWithoutGeneroInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    update: XOR<AlbumesEnGenerosUpdateWithoutGeneroInput, AlbumesEnGenerosUncheckedUpdateWithoutGeneroInput>
    create: XOR<AlbumesEnGenerosCreateWithoutGeneroInput, AlbumesEnGenerosUncheckedCreateWithoutGeneroInput>
  }

  export type AlbumesEnGenerosUpdateWithWhereUniqueWithoutGeneroInput = {
    where: AlbumesEnGenerosWhereUniqueInput
    data: XOR<AlbumesEnGenerosUpdateWithoutGeneroInput, AlbumesEnGenerosUncheckedUpdateWithoutGeneroInput>
  }

  export type AlbumesEnGenerosUpdateManyWithWhereWithoutGeneroInput = {
    where: AlbumesEnGenerosScalarWhereInput
    data: XOR<AlbumesEnGenerosUpdateManyMutationInput, AlbumesEnGenerosUncheckedUpdateManyWithoutGeneroInput>
  }

  export type AlbumCreateWithoutGenerosInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artista: ArtistaCreateNestedOneWithoutAlbumesInput
    canciones?: CancionCreateNestedManyWithoutAlbumInput
  }

  export type AlbumUncheckedCreateWithoutGenerosInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
    artistaId: string
    canciones?: CancionUncheckedCreateNestedManyWithoutAlbumInput
  }

  export type AlbumCreateOrConnectWithoutGenerosInput = {
    where: AlbumWhereUniqueInput
    create: XOR<AlbumCreateWithoutGenerosInput, AlbumUncheckedCreateWithoutGenerosInput>
  }

  export type GeneroCreateWithoutAlbumesInput = {
    nombre: string
    imagen?: string | null
  }

  export type GeneroUncheckedCreateWithoutAlbumesInput = {
    id?: number
    nombre: string
    imagen?: string | null
  }

  export type GeneroCreateOrConnectWithoutAlbumesInput = {
    where: GeneroWhereUniqueInput
    create: XOR<GeneroCreateWithoutAlbumesInput, GeneroUncheckedCreateWithoutAlbumesInput>
  }

  export type AlbumUpsertWithoutGenerosInput = {
    update: XOR<AlbumUpdateWithoutGenerosInput, AlbumUncheckedUpdateWithoutGenerosInput>
    create: XOR<AlbumCreateWithoutGenerosInput, AlbumUncheckedCreateWithoutGenerosInput>
    where?: AlbumWhereInput
  }

  export type AlbumUpdateToOneWithWhereWithoutGenerosInput = {
    where?: AlbumWhereInput
    data: XOR<AlbumUpdateWithoutGenerosInput, AlbumUncheckedUpdateWithoutGenerosInput>
  }

  export type AlbumUpdateWithoutGenerosInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artista?: ArtistaUpdateOneRequiredWithoutAlbumesNestedInput
    canciones?: CancionUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutGenerosInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    artistaId?: StringFieldUpdateOperationsInput | string
    canciones?: CancionUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type GeneroUpsertWithoutAlbumesInput = {
    update: XOR<GeneroUpdateWithoutAlbumesInput, GeneroUncheckedUpdateWithoutAlbumesInput>
    create: XOR<GeneroCreateWithoutAlbumesInput, GeneroUncheckedCreateWithoutAlbumesInput>
    where?: GeneroWhereInput
  }

  export type GeneroUpdateToOneWithWhereWithoutAlbumesInput = {
    where?: GeneroWhereInput
    data: XOR<GeneroUpdateWithoutAlbumesInput, GeneroUncheckedUpdateWithoutAlbumesInput>
  }

  export type GeneroUpdateWithoutAlbumesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GeneroUncheckedUpdateWithoutAlbumesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    imagen?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AlbumCreateManyArtistaInput = {
    id?: string
    titulo: string
    fechaLanzamiento: Date | string
    portada?: string | null
  }

  export type AlbumUpdateWithoutArtistaInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    canciones?: CancionUpdateManyWithoutAlbumNestedInput
    generos?: AlbumesEnGenerosUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateWithoutArtistaInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
    canciones?: CancionUncheckedUpdateManyWithoutAlbumNestedInput
    generos?: AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumNestedInput
  }

  export type AlbumUncheckedUpdateManyWithoutArtistaInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    fechaLanzamiento?: DateTimeFieldUpdateOperationsInput | Date | string
    portada?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CancionCreateManyAlbumInput = {
    id?: string
    titulo: string
    duracion: number
    esFavorito?: boolean
  }

  export type AlbumesEnGenerosCreateManyAlbumInput = {
    generoId: number
  }

  export type CancionUpdateWithoutAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CancionUncheckedUpdateWithoutAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CancionUncheckedUpdateManyWithoutAlbumInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    duracion?: IntFieldUpdateOperationsInput | number
    esFavorito?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AlbumesEnGenerosUpdateWithoutAlbumInput = {
    genero?: GeneroUpdateOneRequiredWithoutAlbumesNestedInput
  }

  export type AlbumesEnGenerosUncheckedUpdateWithoutAlbumInput = {
    generoId?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumesEnGenerosUncheckedUpdateManyWithoutAlbumInput = {
    generoId?: IntFieldUpdateOperationsInput | number
  }

  export type AlbumesEnGenerosCreateManyGeneroInput = {
    albumId: string
  }

  export type AlbumesEnGenerosUpdateWithoutGeneroInput = {
    album?: AlbumUpdateOneRequiredWithoutGenerosNestedInput
  }

  export type AlbumesEnGenerosUncheckedUpdateWithoutGeneroInput = {
    albumId?: StringFieldUpdateOperationsInput | string
  }

  export type AlbumesEnGenerosUncheckedUpdateManyWithoutGeneroInput = {
    albumId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}